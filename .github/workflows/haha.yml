name: Build_oneplus_sm87
on:
  workflow_dispatch:
    inputs:
      REPO_MANIFEST:
        description: "📝请选择要编译的机型："
        required: true
        type: choice
        options:
          - 'oneplus_13'
          - 'oneplus_ace5_pro'
          - 'oneplus_13t'
          - 'oneplus_pad_2_pro'
          - 'oneplus_ace5_ultra'
          - 'realme_GT7'
          - 'realme_GT7pro'
          - 'realme_GT7pro_Speed'
        default: 'oneplus_13'

      keep_original_settings:
        description: "📝保持原内核名称及构建时间(不懂请保持默认)"
        required: false
        default: true
        type: boolean

      custom_kernel_suffix:
        description: "✏️ 自定义内核名称- 仅在取消勾选'保持原设置'时有效"
        required: false
        default: ''
      
      custom_kernel_time:
        description: "⏰ 自定义构建时间- 仅在取消勾选'保持原设置'时有效"
        required: false
        default: ''

      enable_feature_z:
        description: "添加风驰驱动"
        required: false
        default: true
        type: boolean

      enable_feature_b:
         description: "选择网络调度"
         required: false
         type: choice
         options:
            - 'FQ_CODEL'
            - 'BBR'
         default: 'FQ_CODEL'
      
      KPM:
        type: boolean
        description: "是否启用内核模块(KPM)？"
        required: true
        default: true

      # 自定义版本标识（仅显示用）
      KSU_META:
        type: string
        description: "自定义版本标识（例如：酷安Fate007）"
        required: true
        default: "酷安Fate007"
      
      # KSU源码分支（内部使用，不显示在版本中）
      KSU_BRANCH:
        type: choice
        description: "KSU源码分支（不影响版本显示）"
        required: true
        default: "susfs-main"
        options:
          - "susfs-main"
          - "main"
          - "dev"


jobs:
  build:
    name: Build_${{ github.event.inputs.REPO_MANIFEST }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📊 Check disk space
        run: |
          echo "构建前磁盘空间："
          df -h
      
      - name: ⚙️ Set REPO_MANIFEST
        run: |
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            oneplus_ace5_pro)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_ace5_pro_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_ace5_pro" >> $GITHUB_ENV
              ;;
            oneplus_13)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_13_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_13" >> $GITHUB_ENV
              ;;
            *)
              echo "REPO_MANIFEST=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              echo "DEVICES_NAME=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              ;;
          esac
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            oneplus_13 | oneplus_ace5_pro)
              echo 'DEFAULT_SUFFIX=-android15-8-g4dc61d72e02f-abogki415959920-4k' >> $GITHUB_ENV
              ;;
            realme_GT7pro_Speed)
              echo 'DEFAULT_SUFFIX=-android15-8-g013ec21bba94-abogki383916444-4k' >> $GITHUB_ENV
              ;;
            realme_GT7)
              echo 'DEFAULT_SUFFIX=-android15-8-g06c41a4a6e98-abogki395793266-4k' >> $GITHUB_ENV
              ;;
            realme_GT7pro)
              echo 'DEFAULT_SUFFIX=-android15-8-gc6f5283046c6-ab12364222-4k' >> $GITHUB_ENV
              ;;
            oneplus_13t)
              echo 'DEFAULT_SUFFIX=-android15-8-gd43086512890-abogki423825152-4k' >> $GITHUB_ENV
              ;;
            oneplus_pad_2_pro)
              echo 'DEFAULT_SUFFIX=-android15-8-g7b1f455c7143-ab13591283-4k' >> $GITHUB_ENV
              ;;
            oneplus_ace5_ultra)
              echo 'DEFAULT_SUFFIX=-android15-8-g29d86c5fc9dd-abogki428889875-4k' >> $GITHUB_ENV
              ;;
          esac
          if [ "${{ github.event.inputs.keep_original_settings }}" = "false" ] && [ -n "${{ github.event.inputs.custom_kernel_suffix }}" ]; then
            CUSTOM_TIME="${{ github.event.inputs.custom_kernel_time }}"
            if [ -z "$CUSTOM_TIME" ]; then
              CUSTOM_TIME=$(date +'%a %b %d %T %Z %Y')
            fi
            echo "使用自定义构建时间: $CUSTOM_TIME"
            echo "KERNEL_TIME=$CUSTOM_TIME" >> $GITHUB_ENV
          else
            case "${{ github.event.inputs.REPO_MANIFEST }}" in
              oneplus_13 | oneplus_ace5_pro)
                echo 'KERNEL_TIME=Mon May 12 09:09:59 UTC 2025' >> $GITHUB_ENV
                ;;
              realme_GT7pro_Speed)
                echo 'KERNEL_TIME=Tue Dec 17 23:36:49 UTC 2024' >> $GITHUB_ENV
                ;;
              realme_GT7)
                echo 'KERNEL_TIME=Mon Jan 20 03:24:58 UTC 2025' >> $GITHUB_ENV
                ;;
              realme_GT7pro)
                echo 'KERNEL_TIME=Fri Sep 13 02:08:57 UTC 2024' >> $GITHUB_ENV
                ;;
              oneplus_13t)
                echo 'KERNEL_TIME=Tue Jun 10 12:12:23 UTC 2025' >> $GITHUB_ENV
                ;;
              oneplus_pad_2_pro)
                echo 'KERNEL_TIME=Tue Jun  3 03:22:33 UTC 2025' >> $GITHUB_ENV
                ;;
              oneplus_ace5_ultra)
                echo 'KERNEL_TIME=Tue Jul  1 19:48:18 UTC 2025' >> $GITHUB_ENV
                ;;
            esac
          fi
          
      - name: ⚙️ Set device-specific CCACHE_DIR
        run: |
          echo "CCACHE_DIR=$HOME/.ccache_${REPO_MANIFEST}" >> $GITHUB_ENV

      - name: 📦 Configure Git
        run: |
          git config --global user.name "FateYin1"
          git config --global user.email "1244243922@qq.com"

      - name: 🛠 Configure APT caching
        run: |
          APT_CACHE_DIR="$HOME/.apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

      - name: 🛠 Cache APT packages
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/Build_oneplus_sm8750.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: 📦 Install dependencies
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR/lists/partial"
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 p7zip-full git curl ccache libelf-dev \
            build-essential libelf-dev flex bison libssl-dev \
            libncurses-dev liblz4-tool zlib1g-dev \
            libxml2-utils rsync unzip
          
          echo "✅ 依赖安装完成"
          
      - name: 📥 Restore ccache
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ github.ref }}-${{ env.REPO_MANIFEST }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ env.REPO_MANIFEST }}-
            ccache-${{ runner.os }}-

      - name: 📥 Init ccache
        run: |
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"

          INIT_FLAG="$CCACHE_DIR/.ccache_initialized"
          if command -v ccache >/dev/null 2>&1; then
            if [ ! -f "$INIT_FLAG" ]; then
              echo "初始化 ccache ($CCACHE_DIR)..."
              mkdir -p "$CCACHE_DIR"
              ccache -M "$CCACHE_MAXSIZE"
              touch "$INIT_FLAG"
            else
              echo "ccache 已初始化，跳过"
            fi
          else
            echo "未安装 ccache，跳过"
          fi

      - name: 📥 Install repo tool
        run: |
         curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
         chmod a+x ~/repo
         sudo mv ~/repo /usr/local/bin/repo

      - name: 📥 Initialize repo and sync
        run: |
         mkdir kernel_workspace && cd kernel_workspace
         repo init -u https://github.com/showdo/kernel_manifest.git -b refs/heads/oneplus/sm8750 -m ${REPO_MANIFEST}.xml --depth=1
         repo --trace sync -c -j$(nproc --all) --no-tags
         rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
         rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
         
      - name: ⚙️ Set SukiSU Ultra (优化版本显示)
        run: |
          mkdir -p kernel_workspace/kernel_platform
          cd kernel_workspace/kernel_platform
          
          # 提取参数
          BRANCH_NAME="${{ github.event.inputs.KSU_BRANCH }}"
          CUSTOM_TAG="${{ github.event.inputs.KSU_META }}"
          echo "使用KSU分支: $BRANCH_NAME，显示标识: $CUSTOM_TAG"
          
          # 拉取SukiSU源码
          git clone https://github.com/SukiSU-Ultra/SukiSU-Ultra.git -b $BRANCH_NAME --depth=1
          mv SukiSU-Ultra KernelSU
          cd KernelSU
          
          # 提取API版本
          KSU_API_VERSION=$(grep -m1 "KSU_VERSION_API :=" kernel/Makefile | awk -F'= ' '{print $2}' | tr -d '[:space:]')
          if [ -z "$KSU_API_VERSION" ]; then
            echo "⚠️ 未获取到API版本，使用默认值"
            KSU_API_VERSION="3.1.9"
          fi
          
          # 获取Git哈希
          GIT_HASH=$(git rev-parse --short HEAD)
          
          # 生成版本字符串（格式：v{API}-{自定义}[哈希]）
          VERSION_FULL="v$KSU_API_VERSION-$CUSTOM_TAG[$GIT_HASH]"
          echo "生成版本标识: $VERSION_FULL"
          
          # 写入Makefile
          sed -i "/^KSU_VERSION_API :=/c\KSU_VERSION_API := $KSU_API_VERSION" kernel/Makefile
          sed -i "/^KSU_VERSION_FULL :=/c\KSU_VERSION_FULL := $VERSION_FULL" kernel/Makefile
          
          # 计算版本号
          KSU_VERSION=$(expr $(git rev-list --count $BRANCH_NAME 2>/dev/null || echo 13000) + 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

      - name: 🔧 Set up SUSFS (配置 SUSFS)
        run: |
           cd kernel_workspace
            git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
            git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git
            
            cd kernel_platform        
            cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
            cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
            cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
            
            cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
            cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
            cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
            cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
            if [ "$DEVICES_NAME" = "oneplus_ace5_ultra" ] && [ "${REPO_MANIFEST}" != "oneplus_13t" ]; then
            sed -i 's/^\(SUBLEVEL[[:space:]]*=[[:space:]]*\).*/\166/' ./common/Makefile
            fi
            # Apply patches
            cd ./common
            if [ "$DEVICES_NAME" != "oneplus_ace5_ultra" ] && [ "${REPO_MANIFEST}" != "realme_GT7" ]; then
                # 使用预构建的lz4 1.9.4→1.10.0补丁（替换main.bin）
                # 请将下方URL替换为你实际存放补丁的地址
                curl -LO https://github.com/SukiSU-Ultra/patches/raw/main/lz4/lz4_1.9.4_to_1.10.0.patch
                
                # 应用补丁到内核lz4目录
                patch -p1 -d ./lib/lz4 < lz4_1.9.4_to_1.10.0.patch
                
                # 清理补丁文件
                rm -f lz4_1.9.4_to_1.10.0.patch
            fi
            
            if [ "${REPO_MANIFEST}" = "realme_GT7pro_Speed" ] && [ "${REPO_MANIFEST}" = "realme_GT7pro" ]; then
                sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-android15-6.6.patch
                sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-android15-6.6.patch
            fi
            
            patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
            cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
            patch -p1 -F 3 < syscall_hooks.patch
            
            echo "完成"

      - name: 🔧 Cache HMBird patch
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/hmbird_patch.c
          key: hmbird-patch-v1
          restore-keys: |
            hmbird-patch-v1
            
      - name: 🔧 Apply HMBird GKI patch
        run: |
          PATCH_FILE="${{ runner.temp }}/hmbird_patch.c"
          if [ ! -f "$PATCH_FILE" ]; then
            echo "下载HMBird补丁..."
            cp "${GITHUB_WORKSPACE}/hmbird_patch.c" "$PATCH_FILE"
          fi
          
          cd kernel_workspace/kernel_platform/common/drivers
          cp "$PATCH_FILE" hmbird_patch.c
          
          if ! grep -q "hmbird_patch.o" Makefile; then
            echo "obj-y += hmbird_patch.o" >> Makefile
          fi
          echo "HMBird补丁应用完成"

      - name: 🔧 Set gki_defconfig (设置编译配置)
        env:
          ENABLE_B: ${{ github.event.inputs.enable_feature_b }}       
        run: |
          cd kernel_workspace/kernel_platform
          DEFCONFIG="./common/arch/arm64/configs/gki_defconfig"
          
          # 确保配置文件存在
          if [ ! -f "$DEFCONFIG" ]; then
            echo "::error ::未找到gki_defconfig文件: $DEFCONFIG"
            exit 1
          fi
          
          # 配置KSU基础选项
          echo "添加KSU基础配置"
          echo "CONFIG_KSU=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$DEFCONFIG"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$DEFCONFIG"
          echo "CONFIG_KPM=y" >> "$DEFCONFIG"
          
          # 配置压缩算法支持
          echo "添加压缩算法配置"
          echo "CONFIG_CRYPTO_LZ4=y" >> "$DEFCONFIG"
          echo "CONFIG_CRYPTO_LZ4HC=y" >> "$DEFCONFIG"
          echo "CONFIG_CRYPTO_LZ4KD=y" >> "$DEFCONFIG"
          echo "CONFIG_CRYPTO_ZSTD=y" >> "$DEFCONFIG"
          
          # 修复原配置中的拼写错误（defconfi → defconfig）
          echo "CONFIG_F2FS_FS_COMPRESSION=y" >> "$DEFCONFIG"
          echo "CONFIG_F2FS_FS_LZ4=y" >> "$DEFCONFIG"
          echo "CONFIG_F2FS_FS_LZ4HC=y" >> "$DEFCONFIG"
          echo "CONFIG_F2FS_FS_ZSTD=y" >> "$DEFCONFIG"
          echo "CONFIG_KERNEL_LZ4=y" >> "$DEFCONFIG"
          
          # 配置SUSFS功能
          echo "添加SUSFS配置"
          echo "CONFIG_KSU_SUSFS=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$DEFCONFIG"
          
          
          # 移除check_defconfig检查（纯文本替换）
          echo "移除check_defconfig检查"
          sed -i 's/check_defconfig//g' ./common/build.config.gki

      - name: 🔧 Set Kernel name
        env:
          KEEP_ORIGINAL: ${{ github.event.inputs.keep_original_settings }}
          CUSTOM_SUFFIX: ${{ github.event.inputs.custom_kernel_suffix }}
        run: |
          cd kernel_workspace/kernel_platform
          echo "保持原设置: $KEEP_ORIGINAL"
          echo "自定义后缀: $CUSTOM_SUFFIX"
          echo "默认后缀: $DEFAULT_SUFFIX"
          
          if [ "$KEEP_ORIGINAL" = "false" ]; then
            if [ -n "$CUSTOM_SUFFIX" ]; then
              DEFAULT_SUFFIX="$CUSTOM_SUFFIX"
              echo "使用自定义内核名称: $DEFAULT_SUFFIX"
            else
              echo "使用机型默认内核名称: $DEFAULT_SUFFIX"
            fi
          else
            echo "保持原内核名称设置"
          fi
          ESCAPED_SUFFIX=$(printf '%s\n' "$DEFAULT_SUFFIX" | sed 's:[\/&]:\\&:g')
          sudo sed -i "s/-4k/$ESCAPED_SUFFIX/g" ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/${scm_version}//' ./common/scripts/setlocalversion

      - name: 🔧 Enable KPM Config
        if: ${{ github.event.inputs.KPM == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform
          echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki
          
      - name: 🔧 Add sched_ext
        if: ${{inputs.enable_feature_z }}
        run: |
         cd kernel_workspace/kernel_platform/
         git clone https://github.com/showdo/sched_ext.git
         cp -r ./sched_ext/* ./common/kernel/sched
         rm -rf ./sched_ext/.git
         cd common/kernel/sched  

      - name: 🔨 Build Kernel
        run: |
          export PATH="/usr/lib/ccache:$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"          
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"
          export KBUILD_BUILD_TIMESTAMP="${KERNEL_TIME}"
          cd kernel_workspace/kernel_platform/common
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2  gki_defconfig
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2  Image

      - name: 🔨 Apply KPM patch
        if: ${{ github.event.inputs.KPM == 'true' }}
        run: |
           cd kernel_workspace/kernel_platform/common/out/arch/arm64/boot
           curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
           chmod +x patch_linux
           ./patch_linux
           rm -f Image
           mv oImage Image
           
      - name: 📦 Make AnyKernel3
        run: |
          git clone https://github.com/FateYin1/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          
          image_path=""
          if [ -f "kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image" ]; then
            image_path="kernel_workspace/kernel_platform/common/out/arch/arm64/boot/Image"
          elif [ -f "kernel_workspace/kernel_platform/out/arch/arm64/boot/Image" ]; then
            image_path="kernel_workspace/kernel_platform/out/arch/arm64/boot/Image"
          else
            image_path=$(find "kernel_workspace/kernel_platform" -name "Image" | grep -E "boot/Image$" | head -n1)
          fi
          
          if [ -z "$image_path" ] || [ ! -f "$image_path" ]; then
            echo "::error ::未找到Image文件，构建失败"
            exit 1
          fi
          
          echo "✅ Image文件路径: $image_path"
          cp "$image_path" ./AnyKernel3/Image

      - name: 📥 Download SukiSU Ultra APK
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          run_id=$(gh api \
            "repos/SukiSU-Ultra/SukiSU-Ultra/actions/workflows/build-manager.yml/runs?branch=main&status=success&per_page=1" \
            --jq '.workflow_runs[0].id' || echo "")
          if [[ -n "$run_id" ]]; then
            artifact_url=$(gh api \
              "repos/SukiSU-Ultra/SukiSU-Ultra/actions/runs/$run_id/artifacts" | \
              jq -r '.artifacts[] | select(.name == "manager") | .archive_download_url' | head -n1)
            if [[ -n "$artifact_url" ]]; then
              curl -fL -H "Authorization: token $GITHUB_TOKEN" -o manager.zip "$artifact_url"
              unzip -j manager.zip "*.apk" -d ./AnyKernel3/
            fi
          fi

      - name: 📤 Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: AK3_${{ env.KSUVER }}_${{ env.DEVICES_NAME }}_SuKiSU${{ github.event.inputs.KPM == 'true' && '_KPM' || '' }}${{ github.event.inputs.enable_feature_z == 'true' && '_SCHED' || '' }}
          path: ./AnyKernel3/*
