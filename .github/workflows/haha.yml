name: Build_oneplus_sm8750 (仅黑盒监控版)
on:
  workflow_dispatch:
    inputs:
      REPO_MANIFEST:
        description: "📝请选择要编译的机型："
        required: true
        type: choice
        options:
          - 'oneplus_13'
          - 'oneplus_ace5_pro'
          - 'oneplus_13t'
          - 'oneplus_pad_2_pro'
          - 'oneplus_ace5_ultra'
          - 'realme_GT7'
          - 'realme_GT7pro'
          - 'realme_GT7pro_Speed'
        default: 'oneplus_13'

      keep_original_settings:
        description: "📝保持原内核名称及构建时间(不懂请保持默认)"
        required: false
        default: true
        type: boolean

      custom_kernel_suffix:
        description: "✏️ 自定义内核名称- 仅在取消勾选'保持原设置'时有效(不懂请保持默认)"
        required: false
        default: ''
      
      custom_kernel_time:
        description: "⏰ 自定义构建时间- 仅在取消勾选'保持原设置'时有效(不懂请保持默认)"
        required: false
        default: ''

      enable_feature_z:
        description: "添加风驰驱动"
        required: false
        default: true
        type: boolean

      enable_feature_b:
         description: "选择网络调度"
         required: false
         type: choice
         options:
            - 'FQ_CODEL'
            - 'BBR'
         default: 'FQ_CODEL'
      
      KPM:
        type: boolean
        description: "是否启用内核模块(KPM)？"
        required: true
        default: true


jobs:
  build_only_blackbox_monitor:
    name: Build_${{ github.event.inputs.REPO_MANIFEST }}_BlackboxOnly
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 仅初始化黑盒监控目录（按黑盒场景拆分，无多余目录）
      - name: 🕵️ 初始化黑盒监控目录（仅3个黑盒场景）
        run: |
          BB_MONITOR_DIR="${GITHUB_WORKSPACE}/黑盒监控日志_${{ github.event.inputs.REPO_MANIFEST }}"
          mkdir -p "$BB_MONITOR_DIR/setup_bin"  # 监控setup.bin
          mkdir -p "$BB_MONITOR_DIR/main_bin_setup_lz4"  # 监控main.bin setup_lz4
          mkdir -p "$BB_MONITOR_DIR/main_bin_setup_gki"  # 监控main.bin setup_gki_config
          echo "BB_MONITOR_DIR=$BB_MONITOR_DIR" >> $GITHUB_ENV
          echo "✅ 黑盒监控目录初始化完成：$BB_MONITOR_DIR"

      # --------------- 以下非黑盒步骤：完全保留原逻辑，无任何监控 ---------------
      - name: 📊 Check disk space
        run: df -h
      
      - name: ⚙️ Set REPO_MANIFEST
        run: |
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            oneplus_ace5_pro)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_ace5_pro_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_ace5_pro" >> $GITHUB_ENV
              ;;
            oneplus_13)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_13_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_13" >> $GITHUB_ENV
              ;;
            *)
              echo "REPO_MANIFEST=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              echo "DEVICES_NAME=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              ;;
          esac
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            oneplus_13 | oneplus_ace5_pro)
              echo 'DEFAULT_SUFFIX=-android15-8-g4dc61d72e02f-abogki415959920-4k' >> $GITHUB_ENV
              ;;
            realme_GT7pro_Speed)
              echo 'DEFAULT_SUFFIX=-android15-8-g013ec21bba94-abogki383916444-4k' >> $GITHUB_ENV
              ;;
            realme_GT7)
              echo 'DEFAULT_SUFFIX=-android15-8-g06c41a4a6e98-abogki395793266-4k' >> $GITHUB_ENV
              ;;
            realme_GT7pro)
              echo 'DEFAULT_SUFFIX=-android15-8-gc6f5283046c6-ab12364222-4k' >> $GITHUB_ENV
              ;;
            oneplus_13t)
              echo 'DEFAULT_SUFFIX=-android15-8-gd43086512890-abogki423825152-4k' >> $GITHUB_ENV
              ;;
            oneplus_pad_2_pro)
              echo 'DEFAULT_SUFFIX=-android15-8-g7b1f455c7143-ab13591283-4k' >> $GITHUB_ENV
              ;;
            oneplus_ace5_ultra)
              echo 'DEFAULT_SUFFIX=-android15-8-g29d86c5fc9dd-abogki428889875-4k' >> $GITHUB_ENV
              ;;
          esac
          if [ "${{ github.event.inputs.keep_original_settings }}" = "false" ] && [ -n "${{ github.event.inputs.custom_kernel_suffix }}" ]; then
            CUSTOM_TIME="${{ github.event.inputs.custom_kernel_time }}"
            [ -z "$CUSTOM_TIME" ] && CUSTOM_TIME="$(date -u +"%a %b %d %H:%M:%S UTC %Y")"
            echo "KERNEL_TIME=$CUSTOM_TIME" >> $GITHUB_ENV
            echo "DEFAULT_SUFFIX=${{ github.event.inputs.custom_kernel_suffix }}" >> $GITHUB_ENV
          else
            case "${{ github.event.inputs.REPO_MANIFEST }}" in
              oneplus_13 | oneplus_ace5_pro)
                echo 'KERNEL_TIME=Mon May 12 09:09:59 UTC 2025' >> $GITHUB_ENV
                ;;
              realme_GT7pro_Speed)
                echo 'KERNEL_TIME=Tue Dec 17 23:36:49 UTC 2024' >> $GITHUB_ENV
                ;;
              realme_GT7)
                echo 'KERNEL_TIME=Mon Jan 20 03:24:58 UTC 2025' >> $GITHUB_ENV
                ;;
              realme_GT7pro)
                echo 'KERNEL_TIME=Fri Sep 13 02:08:57 UTC 2024' >> $GITHUB_ENV
                ;;
              oneplus_13t)
                echo 'KERNEL_TIME=Tue Jun 10 12:12:23 UTC 2025' >> $GITHUB_ENV
                ;;
              oneplus_pad_2_pro)
                echo 'KERNEL_TIME=Tue Jun  3 03:22:33 UTC 2025' >> $GITHUB_ENV
                ;;
              oneplus_ace5_ultra)
                echo 'KERNEL_TIME=Tue Jul  1 19:48:18 UTC 2025' >> $GITHUB_ENV
                ;;
            esac
          fi
          echo "CCACHE_DIR=$HOME/.ccache_${REPO_MANIFEST}" >> $GITHUB_ENV

      - name: 📦 Configure Git
        run: |
          git config --global user.name "FateYin1"
          git config --global user.email "1244243922@qq.com"

      - name: 🛠 Configure APT caching
        run: |
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

      - name: 🛠 Cache APT packages
        uses: actions/cache@v3
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/Build_oneplus_sm8750.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: 📦 Install dependencies（仅新增strace用于黑盒监控）
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR/lists/partial"
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 p7zip-full git curl ccache libelf-dev \
            build-essential libelf-dev flex bison libssl-dev \
            libncurses-dev liblz4-tool zlib1g-dev \
            libxml2-utils rsync unzip \
            strace diffutils  # 仅保留黑盒监控必需工具
          echo "✅ 依赖安装完成"

      - name: 📥 Restore & Init ccache
        run: |
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"
          INIT_FLAG="$CCACHE_DIR/.ccache_initialized"
          if command -v ccache >/dev/null 2>&1; then
            if [ ! -f "$INIT_FLAG" ]; then
              mkdir -p "$CCACHE_DIR"
              ccache -M "$CCACHE_MAXSIZE"
              touch "$INIT_FLAG"
            fi
          fi

      - name: 📥 Install repo tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: 📥 Initialize repo and sync
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/showdo/kernel_manifest.git -b refs/heads/oneplus/sm8750 -m ${REPO_MANIFEST}.xml --depth=1
          repo --trace sync -c -j$(nproc --all) --no-tags
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      # --------------- 黑盒1：setup.bin 监控（仅监控此步骤） ---------------
      - name: ⚙️ Set SuKiSU Ultra + 监控setup.bin
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/setup.sh" -o setup.sh && bash setup.sh susfs-main
          cd KernelSU
          KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

          # 1. 黑盒前置：环境模拟（确保黑盒能执行以捕获痕迹）
          export GITHUB_ACTIONS="true"
          export CI="true"
          export HOME="/home/runner"
          export USER="runner"
          export PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

          # 2. 黑盒分析：记录文件类型（脚本/二进制）
          cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/setup.bin" ../
          cd ..
          chmod +x setup.bin
          file setup.bin > "${{ env.BB_MONITOR_DIR }}/setup_bin/setup.bin文件类型.log"
          if head -n1 setup.bin | grep -E "^#!/bin/(bash|sh|python)"; then
            cat setup.bin > "${{ env.BB_MONITOR_DIR }}/setup.bin/setup.bin脚本源码.log"  # 脚本直接存源码
          else
            ldd setup.bin 2> "${{ env.BB_MONITOR_DIR }}/setup.bin/setup.bin动态依赖.log"  # 二进制存依赖
          fi

          # 3. 黑盒执行：strace抓全量操作（文件读写/命令执行）
          sudo -E -u runner strace -f -tt -v -s 8192 \
            -e trace=execve,openat,read,write,chmod,unlink,rename,stat \
            -o "${{ env.BB_MONITOR_DIR }}/setup_bin/setup.bin系统调用.log" \
            ./setup.bin 2>&1 | tee "${{ env.BB_MONITOR_DIR }}/setup.bin/setup.bin控制台输出.log"

          # 4. 黑盒结果：记录退出码+关键文件备份（防黑盒修改KernelSU）
          SETUP_EXIT_CODE=${PIPESTATUS[0]}
          echo "退出码：$SETUP_EXIT_CODE" > "${{ env.BB_MONITOR_DIR }}/setup_bin/setup.bin执行结果.log"
          cp -r ./KernelSU "${{ env.BB_MONITOR_DIR }}/setup_bin/执行后_KernelSU备份"  # 备份黑盒可能修改的目录
          if [ $SETUP_EXIT_CODE -ne 0 ]; then
            echo "⚠️ setup.bin执行失败，但监控日志已保存"
          else
            echo "✅ setup.bin监控完成"
          fi

      # --------------- 非黑盒步骤：完全保留原逻辑，无监控 ---------------
      - name: 🛠 替换SukiSU版本标识
        run: |
          cd kernel_workspace/kernel_platform
          TARGET_FILES=$(grep -rl "TG@qdykernel" . || true)
          if [ -n "$TARGET_FILES" ]; then
            sed -i 's/TG@qdykernel/酷安Fate007/g' $TARGET_FILES
          fi

      # --------------- 黑盒2：main.bin setup_lz4 监控（仅监控此步骤） ---------------
      - name: 🔧 Set up SUSFS + 监控main.bin setup_lz4
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
          git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git
          
          cd kernel_platform        
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          if [ "$DEVICES_NAME" = "oneplus_ace5_ultra" ] && [ "${REPO_MANIFEST}" != "oneplus_13t" ]; then
            sed -i 's/^\(SUBLEVEL[[:space:]]*=[[:space:]]*\).*/\166/' ./common/Makefile
          fi
          
          cd ./common
          if [ "$DEVICES_NAME" != "oneplus_ace5_ultra" ] && [ "${REPO_MANIFEST}" != "realme_GT7" ]; then
            # 1. 黑盒前置：备份lz4目录（用于对比黑盒修改）
            mkdir -p "${{ env.BB_MONITOR_DIR }}/main_bin_setup_lz4/执行前_lz4备份"
            cp -r ./lib/lz4/* "${{ env.BB_MONITOR_DIR }}/main_bin_setup_lz4/执行前_lz4备份/" 2>/dev/null || true
            find ./lib/lz4 -type f -exec sha256sum {} \; > "${{ env.BB_MONITOR_DIR }}/main_bin_setup_lz4/执行前_lz4哈希.log"

            # 2. 原逻辑：删除旧lz4文件（保留）
            files=("lib/lz4/lz4_compress.c" "lib/lz4/lz4_decompress.c" "lib/lz4/lz4defs.h" "lib/lz4/lz4hc_compress.c")
            for file in "${files[@]}"; do [ -e "$file" ] && rm "$file"; done

            # 3. 黑盒分析：记录main.bin类型
            cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ./
            chmod +x main.bin
            file main.bin > "${{ env.BB_MONITOR_DIR }}/main_bin_setup_lz4/main.bin文件类型.log"

            # 4. 黑盒执行：strace抓lz4相关操作（重点跟踪lib/lz4）
            sudo -E strace -f -tt -v -s 8192 \
              -e trace=execve,openat,read,write,chmod,unlink,rename \
              -e trace-path="./lib/lz4/*" \
              -o "${{ env.BB_MONITOR_DIR }}/main_bin_setup_lz4/main.bin系统调用.log" \
              ./main.bin "setup_lz4" 2>&1 | tee "${{ env.BB_MONITOR_DIR }}/main_bin_setup_lz4/main.bin控制台输出.log"

            # 5. 黑盒结果：备份执行后lz4+差异对比（明确黑盒改动）
            MAIN_LZ4_EXIT_CODE=${PIPESTATUS[0]}
            echo "退出码：$MAIN_LZ4_EXIT_CODE" > "${{ env.BB_MONITOR_DIR }}/main_bin_setup_lz4/main.bin执行结果.log"
            # 备份执行后lz4目录
            mkdir -p "${{ env.BB_MONITOR_DIR }}/main_bin_setup_lz4/执行后_lz4备份"
            cp -r ./lib/lz4/* "${{ env.BB_MONITOR_DIR }}/main_bin_setup_lz4/执行后_lz4备份/" 2>/dev/null || true
            # 生成lz4差异（明确是替换还是补丁）
            diff -u <(find "${{ env.BB_MONITOR_DIR }}/main_bin_setup_lz4/执行前_lz4备份" -type f | sort) <(find ./lib/lz4 -type f | sort) 2>&1 > "${{ env.BB_MONITOR_DIR }}/main_bin_setup_lz4/lz4文件增减.log"
            if [ $MAIN_LZ4_EXIT_CODE -ne 0 ]; then
              echo "⚠️ main.bin setup_lz4执行失败，但监控日志已保存"
            else
              echo "✅ main.bin setup_lz4监控完成"
            fi
            rm -rf ./main.bin
          fi
          
          # 原逻辑：补丁应用（无监控）
          if [ "${REPO_MANIFEST}" = "realme_GT7pro_Speed" ] && [ "${REPO_MANIFEST}" = "realme_GT7pro" ]; then
            sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-android15-6.6.patch
            sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-android15-6.6.patch
          fi
          patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch

      # --------------- 非黑盒步骤：完全保留原逻辑，无监控 ---------------
      - name: 🔧 Cache & Apply HMBird GKI patch
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/hmbird_patch.c
          key: hmbird-patch-v1
          restore-keys: |
            hmbird-patch-v1
      - name: 🔧 Apply HMBird GKI patch
        run: |
          PATCH_FILE="${{ runner.temp }}/hmbird_patch.c"
          [ ! -f "$PATCH_FILE" ] && cp "${GITHUB_WORKSPACE}/hmbird_patch.c" "$PATCH_FILE"
          cd kernel_workspace/kernel_platform/common/drivers
          cp "$PATCH_FILE" hmbird_patch.c
          grep -q "hmbird_patch.o" Makefile || echo "obj-y += hmbird_patch.o" >> Makefile

      # --------------- 黑盒3：main.bin setup_gki_config 监控（仅监控此步骤） ---------------
      - name: 🔧 Set gki_defconfig + 监控main.bin setup_gki_config
        env:
          ENABLE_B: ${{ github.event.inputs.enable_feature_b }}       
        run: |
          cd kernel_workspace/kernel_platform

          # 1. 黑盒前置：备份gki_defconfig（对比黑盒修改）
          mkdir -p "${{ env.BB_MONITOR_DIR }}/main_bin_setup_gki/执行前_config备份"
          cp ./common/arch/arm64/configs/gki_defconfig "${{ env.BB_MONITOR_DIR }}/main_bin_setup_gki/执行前_config备份/"
          cat ./common/arch/arm64/configs/gki_defconfig > "${{ env.BB_MONITOR_DIR }}/main_bin_setup_gki/执行前_gki_defconfig_full.log"

          # 2. 黑盒分析：记录main.bin类型
          cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ./
          chmod +x main.bin
          file main.bin > "${{ env.BB_MONITOR_DIR }}/main_bin_setup_gki/main.bin文件类型.log"

          # 3. 黑盒执行：strace抓config相关操作（重点跟踪gki_defconfig）
          sudo -E strace -f -tt -v -s 8192 \
            -e trace=execve,openat,read,write,chmod,unlink,rename \
            -e trace-path="./common/arch/arm64/configs/*" \
            -o "${{ env.BB_MONITOR_DIR }}/main_bin_setup_gki/main.bin系统调用.log" \
            ./main.bin "setup_gki_config" "$ENABLE_B" 2>&1 | tee "${{ env.BB_MONITOR_DIR }}/main_bin_setup_gki/main.bin控制台输出.log"

          # 4. 黑盒结果：备份执行后config+差异对比（明确黑盒改了哪些配置）
          MAIN_GKI_EXIT_CODE=${PIPESTATUS[0]}
          echo "退出码：$MAIN_GKI_EXIT_CODE" > "${{ env.BB_MONITOR_DIR }}/main_bin_setup_gki/main.bin执行结果.log"
          # 备份执行后config
          cp ./common/arch/arm64/configs/gki_defconfig "${{ env.BB_MONITOR_DIR }}/main_bin_setup_gki/执行后_config备份/"
          cat ./common/arch/arm64/configs/gki_defconfig > "${{ env.BB_MONITOR_DIR }}/main_bin_setup_gki/执行后_gki_defconfig_full.log"
          # 生成配置差异（核心：明确黑盒修改的配置项）
          diff -u "${{ env.BB_MONITOR_DIR }}/main_bin_setup_gki/执行前_gki_defconfig_full.log" "${{ env.BB_MONITOR_DIR }}/main_bin_setup_gki/执行后_gki_defconfig_full.log" 2>&1 > "${{ env.BB_MONITOR_DIR }}/main_bin_setup_gki/gki_defconfig修改差异.log"
          
          if [ $MAIN_GKI_EXIT_CODE -ne 0 ]; then
            echo "⚠️ main.bin setup_gki_config执行失败，但监控日志已保存"
          else
            echo "✅ main.bin setup_gki_config监控完成"
          fi
          rm -rf ./main.bin
          
          # 原逻辑：修改build.config.gki（无监控）
          sudo sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "BUILD Kernel"

      # --------------- 以下非黑盒步骤：完全保留原逻辑，无任何监控 ---------------
      - name: 🔧 Set Kernel name
        env:
          KEEP_ORIGINAL: ${{ github.event.inputs.keep_original_settings }}
          CUSTOM_SUFFIX: ${{ github.event.inputs.custom_kernel_suffix }}
        run: |
          cd kernel_workspace/kernel_platform
          echo "保持原设置: $KEEP_ORIGINAL"
          if [ "$KEEP_ORIGINAL" = "false" ] && [ -n "$CUSTOM_SUFFIX" ]; then
            DEFAULT_SUFFIX="$CUSTOM_SUFFIX"
          fi
          ESCAPED_SUFFIX=$(printf '%s\n' "$DEFAULT_SUFFIX" | sed 's:[\/&]:\\&:g')
          sudo sed -i "s/-4k/$ESCAPED_SUFFIX/g" ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/${scm_version}//' ./common/scripts/setlocalversion

      - name: 🔧 Enable KPM Config
        if: ${{ github.event.inputs.KPM == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform
          echo "CONFIG_KPM=y" >> ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: 🔧 Add sched_ext
        if: ${{ inputs.enable_feature_z }}
        run: |
          cd kernel_workspace/kernel_platform/
          git clone https://github.com/showdo/sched_ext.git
          cp -r ./sched_ext/* ./common/kernel/sched
          rm -rf ./sched_ext/.git
          cd common/kernel/sched  

      - name: 🔨 Build Kernel
        run: |
          export PATH="/usr/lib/ccache:$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/prebuilts/clang/host/linux-x86/clang-r510928/bin:$PATH"          
          export CCACHE_COMPILERCHECK="%compiler% -dumpmachine; %compiler% -dumpversion"
          export CCACHE_NOHASHDIR="true"
          export CCACHE_HARDLINK="true"
          export CCACHE_DIR="${{ env.CCACHE_DIR }}"
          export CCACHE_MAXSIZE="8G"
          export KBUILD_BUILD_TIMESTAMP="${KERNEL_TIME}"
          cd kernel_workspace/kernel_platform/common
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2  gki_defconfig
          make -j$(nproc --all) LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CC="ccache clang" RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole LD=ld.lld HOSTLD=ld.lld O=out KCFLAGS+=-O2  Image

      - name: 🔨 Apply KPM patch
        if: ${{ github.event.inputs.KPM == 'true' }}
        run: |
          cd kernel_workspace/kernel_platform/common/out/arch/arm64/boot
          curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image

      - name: 📦 Make AnyKernel3
        run: |
          git clone https://github.com/FateYin1/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          image_path=$(find "kernel_workspace/kernel_platform" -name "Image" | grep -E "boot/Image$" | head -n1)
          [ -z "$image_path" ] && { echo "::error ::未找到Image文件"; exit 1; }
          cp "$image_path" ./AnyKernel3/Image

      - name: 📥 Download SukiSU Ultra APK
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          run_id=$(gh api "repos/SukiSU-Ultra/SukiSU-Ultra/actions/workflows/build-manager.yml/runs?branch=main&status=success&per_page=1" --jq '.workflow_runs[0].id' || echo "")
          [ -n "$run_id" ] && {
            artifact_url=$(gh api "repos/SukiSU-Ultra/SukiSU-Ultra/actions/runs/$run_id/artifacts" | jq -r '.artifacts[] | select(.name == "manager") | .archive_download_url' | head -n1)
            [ -n "$artifact_url" ] && {
              curl -fL -H "Authorization: token $GITHUB_TOKEN" -o manager.zip "$artifact_url"
              unzip -j manager.zip "*.apk" -d ./AnyKernel3/
            }
          }

      # 仅上传黑盒监控日志（核心产出）
      - name: 📤 上传黑盒监控日志（用于替代黑盒）
        uses: actions/upload-artifact@v4
        with:
          name: 黑盒监控日志_${{ env.DEVICES_NAME }}_${{ github.run_id }}
          path: ${{ env.BB_MONITOR_DIR }}/**/*
          retention-days: 30

      - name: 📤 Upload AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: AK3_${{ env.KSUVER }}_${{ env.DEVICES_NAME }}_SuKiSU${{ github.event.inputs.KPM == 'true' && '_KPM' || '' }}${{ github.event.inputs.enable_feature_z == 'true' && '_SCHED' || '' }}
          path: ./AnyKernel3/*
          retention-days: 7
