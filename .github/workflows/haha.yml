name: Build_oneplus_sm8750 (main.bin内部调试版)
on:
  workflow_dispatch:
    inputs:
      REPO_MANIFEST:
        description: "📝请选择要编译的机型："
        required: true
        type: choice
        options:
          - 'oneplus_13'
          - 'oneplus_ace5_pro'
          - 'oneplus_13t'
          - 'oneplus_pad_2_pro'
          - 'oneplus_ace5_ultra'
          - 'realme_GT7'
          - 'realme_GT7pro'
          - 'realme_GT7pro_Speed'
        default: 'oneplus_13'

      # 其他输入参数保持不变...
      keep_original_settings:
        description: "📝保持原内核名称及构建时间"
        required: false
        default: true
        type: boolean
      # ...省略其他参数

jobs:
  build_with_command_monitor:
    runs-on: ubuntu-latest
    steps:
      # 省略前面相同步骤（依赖安装、repo同步等）

      - name: 🔧 Set gki_defconfig（main.bin内部调试）
        env:
          ENABLE_B: ${{ github.event.inputs.enable_feature_b }}       
        run: |
          cd kernel_workspace/kernel_platform
          
          # 1. 验证核心文件内容完整性
          GKI_CONFIG_PATH="./common/arch/arm64/configs/gki_defconfig"
          echo "🔍 验证gki_defconfig内容..."
          # 检查是否为有效配置文件（包含CONFIG_前缀）
          if ! grep -q "^CONFIG_" "$GKI_CONFIG_PATH"; then
            echo "::error ::gki_defconfig内容无效，未找到CONFIG_条目"
            exit 1
          fi
          # 备份完整文件内容用于对比
          cat "$GKI_CONFIG_PATH" > "${{ env.MONITOR_DIR }}/main_bin/setup_gki_config/执行前_gki_defconfig完整内容.log"
          
          # 2. 深度解析main.bin类型及内容（关键新增）
          echo "🔍 解析main.bin类型及内容..."
          cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ./
          # 检查是否为脚本文件（可直接查看源码）
          if head -n 1 main.bin | grep -q -E "^#!\/bin\/(bash|sh|python)"; then
            echo "✅ main.bin是脚本文件，保存内容用于分析..."
            cat main.bin > "${{ env.MONITOR_DIR }}/main_bin/setup_gki_config/main.bin_脚本源码.log"
            # 检查脚本语法错误
            if head -n 1 main.bin | grep -q "bash"; then
              echo "🔍 检查bash脚本语法..."
              bash -n main.bin 2> "${{ env.MONITOR_DIR }}/main_bin/setup_gki_config/main.bin_语法检查.log"
              if [ $? -ne 0 ]; then
                echo "::error ::main.bin脚本存在语法错误"
                cat "${{ env.MONITOR_DIR }}/main_bin/setup_gki_config/main.bin_语法检查.log"
                exit 1
              fi
            fi
          else
            # 二进制文件处理
            echo "✅ main.bin是二进制文件，分析执行特征..."
            # 检查是否为静态链接（动态链接可能缺库）
            if ldd main.bin 2>&1 | grep -q "not a dynamic executable"; then
              echo "📌 main.bin是静态链接二进制"
            else
              echo "📌 main.bin动态依赖："
              ldd main.bin | tee "${{ env.MONITOR_DIR }}/main_bin/setup_gki_config/main.bin_动态依赖.log"
            fi
          fi
          
          # 3. 执行环境全景检查（新增）
          echo "🔍 执行环境全景检查..."
          # 检查当前用户权限
          echo "当前用户：$(whoami)，UID: $(id -u)，GID: $(id -g)" >> "${{ env.MONITOR_DIR }}/main_bin/setup_gki_config/环境检查.log"
          # 检查工作目录权限
          ls -ld . >> "${{ env.MONITOR_DIR }}/main_bin/setup_gki_config/环境检查.log"
          # 检查关键目录可写性
          for dir in ./ ./common ./common/arch/arm64/configs; do
            touch "$dir/_test_write_permission" 2>> "${{ env.MONITOR_DIR }}/main_bin/setup_gki_config/环境检查.log"
            if [ $? -ne 0 ]; then
              echo "::error ::目录不可写：$dir"
              exit 1
            fi
            rm -f "$dir/_test_write_permission"
          done
          
          # 4. 执行main.bin并捕获极致细节
          echo "▶️ 执行main.bin（带指令级跟踪）..."
          # 导出所有环境变量供main.bin使用
          export > "${{ env.MONITOR_DIR }}/main_bin/setup_gki_config/执行时环境变量全量.log"
          
          # 使用strace捕获所有系统调用，包括信号和进程状态
          sudo -E strace -f -tt -v -s 8192 \
            -e trace=all \
            -o "${{ env.MONITOR_DIR }}/main_bin/setup_gki_config/strace全量跟踪.log" \
            ./main.bin "setup_gki_config" "$ENABLE_B" \
            1> "${{ env.MONITOR_DIR }}/main_bin/setup_gki_config/stdout.log" \
            2> "${{ env.MONITOR_DIR }}/main_bin/setup_gki_config/stderr.log"
          
          # 5. 捕获退出码并强制分析
          MAIN_GKI_EXIT_CODE=$?
          echo "退出码：$MAIN_GKI_EXIT_CODE" >> "${{ env.MONITOR_DIR }}/main_bin/setup_gki_config/执行信息.txt"
          
          # 6. 执行后文件状态检查
          echo "📥 备份执行后状态..."
          [ -f "$GKI_CONFIG_PATH" ] && cat "$GKI_CONFIG_PATH" > "${{ env.MONITOR_DIR }}/main_bin/setup_gki_config/执行后_gki_defconfig完整内容.log"
          
          # 7. 失败时强制暴露关键线索
          if [ $MAIN_GKI_EXIT_CODE -ne 0 ]; then
            echo "::error ::main.bin执行失败，退出码=$MAIN_GKI_EXIT_CODE"
            echo "========================================"
            echo "🚨 错误输出（完整）："
            cat "${{ env.MONITOR_DIR }}/main_bin/setup_gki_config/stderr.log"
            echo "========================================"
            echo "🔍 最后10个系统调用："
            grep -E "exit_group|write|openat|execve" "${{ env.MONITOR_DIR }}/main_bin/setup_gki_config/strace全量跟踪.log" | tail -n 10
            echo "========================================"
            exit $MAIN_GKI_EXIT_CODE
          fi
          
          rm -rf ./main.bin
          echo "✅ main.bin执行成功"

      # 省略后续步骤...

      - name: 📤 上传命令监控日志
        uses: actions/upload-artifact@v4
        with:
          name: 命令监控日志_${{ env.DEVICES_NAME }}
          path: ${{ env.MONITOR_DIR }}
          retention-days: 14
