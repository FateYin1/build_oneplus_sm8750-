name: LZ4_ZSTD_Patch_Capture_Only
on:
  workflow_dispatch:
    inputs:
      REPO_MANIFEST:
        description: "📝选择机型"
        required: true
        type: choice
        options:
          - 'oneplus_13'
          - 'oneplus_ace5_pro'
          - 'oneplus_13t'
          - 'oneplus_pad_2_pro'
          - 'oneplus_ace5_ultra'
          - 'realme_GT7'
          - 'realme_GT7pro'
          - 'realme_GT7pro_Speed'
        default: 'oneplus_13'


jobs:
  capture_patch:
    name: Capture_LZ4_ZSTD_Patch_${{ github.event.inputs.REPO_MANIFEST }}
    runs-on: ubuntu-latest
    steps:
      # 1. 检出仓库代码（含main.bin等必要文件）
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 检查磁盘空间
      - name: 📊 Check disk space
        run: |
          echo "构建前磁盘空间："
          df -h

      # 3. 设置机型环境变量（匹配原始逻辑）
      - name: ⚙️ Set REPO_MANIFEST & DEVICES_NAME
        run: |
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            oneplus_ace5_pro)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_ace5_pro_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_ace5_pro" >> $GITHUB_ENV
              ;;
            oneplus_13)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_13_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_13" >> $GITHUB_ENV
              ;;
            *)
              echo "REPO_MANIFEST=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              echo "DEVICES_NAME=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              ;;
          esac
          # 修复原始脚本中自定义时间变量引用错误
          if [ "${{ github.event.inputs.keep_original_settings }}" = "false" ] && [ -n "${{ github.event.inputs.custom_kernel_suffix }}" ]; then
            echo "KERNEL_TIME=${{ github.event.inputs.custom_kernel_time }}" >> $GITHUB_ENV
          else
            case "${{ github.event.inputs.REPO_MANIFEST }}" in
              oneplus_13 | oneplus_ace5_pro)
                echo 'KERNEL_TIME=Mon May 12 09:09:59 UTC 2025' >> $GITHUB_ENV
                ;;
              *)
                echo 'KERNEL_TIME=Mon May 12 09:09:59 UTC 2025' >> $GITHUB_ENV  # 统一默认时间
                ;;
            esac
          fi

      # 4. 配置Git账户（确保后续git操作正常）
      - name: 📦 Configure Git
        run: |
          git config --global user.name "FateYin1"
          git config --global user.email "1244243922@qq.com"

      # 5. 配置APT缓存并安装依赖（含diff工具）
      - name: 🛠 Configure APT & Install dependencies
        run: |
          # 配置APT缓存
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

          # 安装依赖（含diff所需的coreutils）
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 git curl libelf-dev \
            build-essential flex bison libssl-dev \
            liblz4-tool zlib1g-dev rsync unzip coreutils  # coreutils提供diff工具

      # 6. 安装并修复repo工具（解决版本警告）
      - name: 📥 Install & Fix repo tool
        run: |
          # 卸载旧版repo（避免冲突）
          sudo apt remove -y repo || true
          # 安装最新版repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo
          # 修复Python utcnow()语法警告
          sudo sed -i 's/import datetime/import datetime\nfrom datetime import UTC/' /usr/local/bin/repo
          sudo sed -i 's/datetime.datetime.utcnow()/datetime.datetime.now(UTC)/g' /usr/local/bin/repo
          # 验证repo
          echo "repo路径：$(which repo)"
          echo "repo版本：$(repo --version | head -n1)"

      # 7. 同步内核源码（原始逻辑完整保留）
      - name: 📥 Sync kernel source
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/showdo/kernel_manifest.git -b refs/heads/oneplus/sm8750 -m ${REPO_MANIFEST}.xml --depth=1
          repo --trace sync -c -j$(nproc --all) --no-tags
          # 清理冗余文件（原始逻辑）
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
          # 验证源码核心目录
          if [ ! -d "kernel_platform/common/lib/lz4" ]; then
            echo "::error ::LZ4核心目录不存在：kernel_platform/common/lib/lz4"
            exit 1
          fi

      # 8. 配置SuKiSU Ultra（原始逻辑，确保后续SUSFS配置正常）
      - name: ⚙️ Set SuKiSU Ultra
        run: |
          mkdir -p kernel_workspace/kernel_platform
          cd kernel_workspace/kernel_platform
          
          # 拉取SuKiSU脚本并执行
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/setup.sh" -o setup.sh && bash setup.sh susfs-main
          cd KernelSU
          KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          
          # 执行setup.bin（原始逻辑）
          cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/setup.bin" ./
          chmod +x setup.bin
          if [ ! -f "kernel/Makefile" ]; then
            echo "::error ::kernel/Makefile不存在"
            exit 1
          fi
          ./setup.bin

      # 9. 替换SuKiSU版本标识（原始逻辑，避免冲突）
      - name: 🛠 Replace SuKiSU version tag
        run: |
          cd kernel_workspace/kernel_platform
          TARGET_FILES=$(grep -rl "TG@qdykernel" . || true)
          if [ -n "$TARGET_FILES" ]; then
            sed -i 's/TG@qdykernel/酷安Fate007/g' $TARGET_FILES
            echo "✅ 版本标识替换完成"
          else
            echo "⚠️ 未找到目标标识文件"
          fi

      # 10. 备份LZ4/ZSTD原始文件（含汇编文件）
      - name: 📋 Backup original LZ4/ZSTD files (include .s)
        run: |
          # 核心路径（原始脚本已确定）
          COMMON_DIR="kernel_workspace/kernel_platform/common"
          LZ4_DIR="$COMMON_DIR/lib/lz4"
          # 自动查找ZSTD目录（适配可能的路径）
          ZSTD_DIR=$(find "$COMMON_DIR" -type d -name "zstd" | grep -E "(lib|compression)/zstd" | head -1 || true)
          
          # 备份目录（独立存储，不干扰原始源码）
          BACKUP_DIR="${GITHUB_WORKSPACE}/lz4_zstd_original_backup"
          mkdir -p "$BACKUP_DIR"
          
          # 备份LZ4所有文件（含.c/.h/.s/Makefile）
          echo "✅ 备份LZ4目录：$LZ4_DIR"
          cp -r "$LZ4_DIR" "$BACKUP_DIR/lib/lz4"
          
          # 备份ZSTD（若存在）
          if [ -n "$ZSTD_DIR" ] && [ -d "$ZSTD_DIR" ]; then
            ZSTD_REL_PATH="${ZSTD_DIR#$COMMON_DIR/}"
            echo "✅ 备份ZSTD目录：$ZSTD_DIR"
            mkdir -p "$BACKUP_DIR/$(dirname "$ZSTD_REL_PATH")"
            cp -r "$ZSTD_DIR" "$BACKUP_DIR/$ZSTD_REL_PATH"
          else
            echo "⚠️ 未找到ZSTD目录，跳过备份"
          fi

      # 11. 配置SUSFS + 执行main.bin修改LZ4（核心步骤，触发改动）
      - name: 🔧 Set up SUSFS & run main.bin
        run: |
          cd kernel_workspace
          # 拉取SUSFS和SukiSU_patch（原始逻辑）
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
          git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git
          
          cd kernel_platform
          # 复制SUSFS补丁文件（原始逻辑）
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          # 复制SukiSU_patch文件（原始逻辑）
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          
          # 执行main.bin修改LZ4（核心触发步骤）
          cd ./common
          if [ "$DEVICES_NAME" != "oneplus_ace5_ultra" ] && [ "${REPO_MANIFEST}" != "realme_GT7" ]; then
            # 删除旧LZ4文件（原始逻辑）
            files=(
              "lib/lz4/lz4_compress.c"
              "lib/lz4/lz4_decompress.c"
              "lib/lz4/lz4defs.h"
              "lib/lz4/lz4hc_compress.c"
            )
            for file in "${files[@]}"; do
              if [ -e "$file" ]; then
                rm "$file"
              fi
            done
            # 执行加密脚本main.bin
            cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ./
            chmod +x main.bin
            ./main.bin "setup_lz4"
            rm -rf ./main.bin  # 清理临时文件
            echo "✅ main.bin执行完成，LZ4已修改"
          fi

      # 12. 生成LZ4/ZSTD补丁（含汇编文件，最终目标步骤）
      - name: 🔨 Generate LZ4/ZSTD patches (include .s)
        run: |
          # 核心路径定义
          COMMON_DIR="kernel_workspace/kernel_platform/common"
          LZ4_DIR="$COMMON_DIR/lib/lz4"
          ZSTD_DIR=$(find "$COMMON_DIR" -type d -name "zstd" | grep -E "(lib|compression)/zstd" | head -1 || true)
          BACKUP_DIR="${GITHUB_WORKSPACE}/lz4_zstd_original_backup"
          PATCH_DIR="${GITHUB_WORKSPACE}/final_lz4_zstd_patches"
          mkdir -p "$PATCH_DIR"

          # 生成LZ4完整补丁（对比备份与修改后文件）
          echo "=== 生成LZ4补丁 ==="
          if [ -d "$BACKUP_DIR/lib/lz4" ] && [ -d "$LZ4_DIR" ]; then
            # -u: 显示差异，-r: 递归对比目录，-N:  treat absent files as empty
            diff -urN "$BACKUP_DIR/lib/lz4" "$LZ4_DIR" > "$PATCH_DIR/lz4_patch_with_asm.patch"
            # 验证补丁有效性（非空则保留）
            if [ -s "$PATCH_DIR/lz4_patch_with_asm.patch" ]; then
              echo "✅ LZ4补丁生成成功：lz4_patch_with_asm.patch"
              echo "补丁大小：$(du -sh "$PATCH_DIR/lz4_patch_with_asm.patch" | awk '{print $1}')"
            else
              rm "$PATCH_DIR/lz4_patch_with_asm.patch"
              echo "⚠️ LZ4无实际改动，未生成补丁"
            fi
          else
            echo "❌ LZ4目录缺失，无法生成补丁"
          fi

          # 生成ZSTD补丁（若ZSTD存在）
          echo -e "\n=== 生成ZSTD补丁 ==="
          if [ -n "$ZSTD_DIR" ] && [ -d "$ZSTD_DIR" ] && [ -d "$BACKUP_DIR/$(basename "$ZSTD_DIR")" ]; then
            ZSTD_REL_PATH="${ZSTD_DIR#$COMMON_DIR/}"
            diff -urN "$BACKUP_DIR/$ZSTD_REL_PATH" "$ZSTD_DIR" > "$PATCH_DIR/zstd_patch_with_asm.patch"
            if [ -s "$PATCH_DIR/zstd_patch_with_asm.patch" ]; then
              echo "✅ ZSTD补丁生成成功：zstd_patch_with_asm.patch"
              echo "补丁大小：$(du -sh "$PATCH_DIR/zstd_patch_with_asm.patch" | awk '{print $1}')"
            else
              rm "$PATCH_DIR/zstd_patch_with_asm.patch"
              echo "⚠️ ZSTD无实际改动，未生成补丁"
            fi
          else
            echo "⚠️ ZSTD目录缺失或未改动，跳过补丁生成"
          fi

          # 输出补丁列表
          echo -e "\n=== 最终补丁列表 ==="
          if [ -n "$(ls -A "$PATCH_DIR" 2>/dev/null)" ]; then
            ls -l "$PATCH_DIR"
          else
            echo "❌ 未生成任何补丁"
          fi

      # 13. 上传最终补丁产物（供后续移植使用）
      - name: 📤 Upload LZ4/ZSTD patches
        uses: actions/upload-artifact@v4
        with:
          name: LZ4_ZSTD_Patches_${{ env.DEVICES_NAME }}
          path: |
            ./final_lz4_zstd_patches/*        # 最终生成的补丁（含汇编）
            ./lz4_zstd_original_backup/*     # 原始文件备份（对比用）
          retention-days: 365  # 长期保留，便于后续更新移植
