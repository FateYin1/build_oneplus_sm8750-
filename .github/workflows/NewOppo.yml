name: LZ4_ZSTD_Patch_Capture_Only
on:
  workflow_dispatch:
    inputs:
      REPO_MANIFEST:
        description: "📝选择机型"
        required: true
        type: choice
        options:
          - 'oneplus_13'
          - 'oneplus_ace5_pro'
          - 'oneplus_13t'
          - 'oneplus_pad_2_pro'
          - 'oneplus_ace5_ultra'
          - 'realme_GT7'
          - 'realme_GT7pro'
          - 'realme_GT7pro_Speed'
        default: 'oneplus_13'


jobs:
  capture_patch:
    name: Capture_LZ4_ZSTD_Patch_${{ github.event.inputs.REPO_MANIFEST }}
    runs-on: ubuntu-latest
    steps:
      # 省略前面相同的步骤（检出代码、设置环境变量、安装依赖等）
      # ...

      # 11. 配置SUSFS & 执行main.bin修改LZ4（保持不变）
      - name: 🔧 Set up SUSFS & run main.bin
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
          git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git
          
          cd kernel_platform
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          
          cd ./common
          if [ "$DEVICES_NAME" != "oneplus_ace5_ultra" ] && [ "${REPO_MANIFEST}" != "realme_GT7" ]; then
            files=(
              "lib/lz4/lz4_compress.c"
              "lib/lz4/lz4_decompress.c"
              "lib/lz4/lz4defs.h"
              "lib/lz4/lz4hc_compress.c"
            )
            for file in "${files[@]}"; do
              if [ -e "$file" ]; then
                rm "$file"
              fi
            done
            cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ./
            chmod +x main.bin
            ./main.bin "setup_lz4"
            rm -rf ./main.bin
            echo "✅ main.bin执行完成，LZ4已修改"
            # 新增：打印修改后的LZ4目录内容（调试用）
            echo "=== 修改后LZ4目录文件列表 ==="
            ls -la "lib/lz4" || echo "修改后LZ4目录不存在"
          fi

      # 12. 生成LZ4/ZSTD补丁（添加调试和容错）
      - name: 🔨 Generate LZ4/ZSTD patches (with debug)
        run: |
          # 定义路径变量
          COMMON_DIR="kernel_workspace/kernel_platform/common"
          LZ4_DIR="$COMMON_DIR/lib/lz4"
          BACKUP_DIR="${GITHUB_WORKSPACE}/lz4_zstd_original_backup"
          PATCH_DIR="${GITHUB_WORKSPACE}/final_lz4_zstd_patches"
          mkdir -p "$PATCH_DIR"

          # 新增：打印关键路径变量（调试用）
          echo "=== 补丁生成关键路径 ==="
          echo "COMMON_DIR: $COMMON_DIR"
          echo "LZ4_DIR: $LZ4_DIR"
          echo "BACKUP_DIR: $BACKUP_DIR"
          echo "BACKUP LZ4路径: $BACKUP_DIR/lib/lz4"

          # 新增：检查备份目录和修改后目录是否存在
          echo -e "\n=== 目录存在性检查 ==="
          if [ ! -d "$LZ4_DIR" ]; then
            echo "❌ 错误：修改后的LZ4目录不存在 - $LZ4_DIR"
            exit 1
          else
            echo "✅ 修改后的LZ4目录存在"
            # 打印修改后目录的文件（确认内容）
            echo "修改后LZ4目录内容："
            ls -la "$LZ4_DIR"
          fi

          if [ ! -d "$BACKUP_DIR/lib/lz4" ]; then
            echo "❌ 错误：备份的LZ4目录不存在 - $BACKUP_DIR/lib/lz4"
            exit 1
          else
            echo "✅ 备份的LZ4目录存在"
            # 打印备份目录的文件（确认内容）
            echo "备份的LZ4目录内容："
            ls -la "$BACKUP_DIR/lib/lz4"
          fi

          # 生成LZ4补丁（带详细输出）
          echo -e "\n=== 生成LZ4补丁 ==="
          # 使用diff的--debug选项输出详细对比过程（仅调试用，可注释）
          diff -urN --debug "$BACKUP_DIR/lib/lz4" "$LZ4_DIR" > "$PATCH_DIR/lz4_patch_with_asm.patch"
          
          # 检查补丁生成结果
          if [ $? -eq 0 ]; then
            echo "✅ diff命令执行成功"
            if [ -s "$PATCH_DIR/lz4_patch_with_asm.patch" ]; then
              echo "✅ LZ4补丁生成成功（非空）"
              # 打印补丁前10行（确认内容）
              echo "补丁前10行："
              head -n 10 "$PATCH_DIR/lz4_patch_with_asm.patch"
            else
              rm "$PATCH_DIR/lz4_patch_with_asm.patch"
              echo "⚠️ LZ4无实际改动，已删除空补丁"
            fi
          else
            echo "❌ diff命令执行失败（返回值非0）"
            # 输出diff的错误日志（如果有）
            echo "diff错误输出："
            cat "$PATCH_DIR/lz4_patch_with_asm.patch" 2>/dev/null
            exit 1
          fi

          # 生成ZSTD补丁（保持类似逻辑，省略重复部分）
          # ...

      # 13. 上传最终补丁产物（保持不变）
      - name: 📤 Upload LZ4/ZSTD patches
        uses: actions/upload-artifact@v4
        with:
          name: LZ4_ZSTD_Patches_${{ env.DEVICES_NAME }}
          path: |
            ./final_lz4_zstd_patches/*
            ./lz4_zstd_original_backup/*
          retention-days: 365
