name: LZ4_ZSTD_Patch_Capture_Only
on:
  workflow_dispatch:
    inputs:
      REPO_MANIFEST:
        description: "📝选择机型"
        required: true
        type: choice
        options:
          - 'oneplus_13'
          - 'oneplus_ace5_pro'
          - 'oneplus_13t'
          - 'oneplus_pad_2_pro'
          - 'oneplus_ace5_ultra'
          - 'realme_GT7'
          - 'realme_GT7pro'
          - 'realme_GT7pro_Speed'
        default: 'oneplus_13'


jobs:
  capture_patch:
    name: Capture_LZ4_ZSTD_Patch_${{ github.event.inputs.REPO_MANIFEST }}
    runs-on: ubuntu-latest
    steps:
      # 1. 检出仓库代码
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 检查磁盘空间
      - name: 📊 Check disk space
        run: |
          echo "构建前磁盘空间："
          df -h

      # 3. 设置机型环境变量
      - name: ⚙️ Set REPO_MANIFEST & DEVICES_NAME
        run: |
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            oneplus_ace5_pro)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_ace5_pro_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_ace5_pro" >> $GITHUB_ENV
              ;;
            oneplus_13)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_13_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_13" >> $GITHUB_ENV
              ;;
            *)
              echo "REPO_MANIFEST=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              echo "DEVICES_NAME=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              ;;
          esac
          echo 'KERNEL_TIME=Mon May 12 09:09:59 UTC 2025' >> $GITHUB_ENV

      # 4. 配置Git账户
      - name: 📦 Configure Git
        run: |
          git config --global user.name "FateYin1"
          git config --global user.email "1244243922@qq.com"

      # 5. 配置APT缓存并安装依赖
      - name: 🛠 Configure APT & Install dependencies
        run: |
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 git curl libelf-dev \
            build-essential flex bison libssl-dev \
            liblz4-tool zlib1g-dev rsync unzip coreutils

      # 6. 安装并修复repo工具
      - name: 📥 Install & Fix repo tool
        run: |
          sudo apt remove -y repo || true
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo
          sudo sed -i 's/import datetime/import datetime\nfrom datetime import UTC/' /usr/local/bin/repo
          sudo sed -i 's/datetime.datetime.utcnow()/datetime.datetime.now(UTC)/g' /usr/local/bin/repo
          echo "repo路径：$(which repo)"
          echo "repo版本：$(repo --version | head -n1)"

      # 7. 同步内核源码
      - name: 📥 Sync kernel source
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/showdo/kernel_manifest.git -b refs/heads/oneplus/sm8750 -m ${REPO_MANIFEST}.xml --depth=1
          repo --trace sync -c -j$(nproc --all) --no-tags
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
          if [ ! -d "kernel_platform/common/lib/lz4" ]; then
            echo "::error ::LZ4核心目录不存在: kernel_platform/common/lib/lz4"
            exit 1
          fi
          echo "=== 同步后原始LZ4目录内容 ==="
          ls -la "kernel_platform/common/lib/lz4"

      # 8. 配置SuKiSU Ultra
      - name: ⚙️ Set SuKiSU Ultra
        run: |
          mkdir -p kernel_workspace/kernel_platform
          cd kernel_workspace/kernel_platform
          
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/setup.sh" -o setup.sh && bash setup.sh susfs-main
          cd KernelSU
          KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          
          cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/setup.bin" ./
          chmod +x setup.bin
          if [ ! -f "kernel/Makefile" ]; then
            echo "::error ::kernel/Makefile不存在"
            exit 1
          fi
          ./setup.bin

      # 9. 替换SuKiSU版本标识
      - name: 🛠 Replace SuKiSU version tag
        run: |
          cd kernel_workspace/kernel_platform
          TARGET_FILES=$(grep -rl "TG@qdykernel" . || true)
          if [ -n "$TARGET_FILES" ]; then
            sed -i 's/TG@qdykernel/酷安Fate007/g' $TARGET_FILES
            echo "✅ 版本标识替换完成"
          else
            echo "⚠️ 未找到目标标识文件"
          fi

      # 10. 备份LZ4/ZSTD原始文件
      - name: 📋 Backup original LZ4/ZSTD files
        run: |
          COMMON_DIR="kernel_workspace/kernel_platform/common"
          LZ4_DIR="$COMMON_DIR/lib/lz4"
          ZSTD_DIR=$(find "$COMMON_DIR" -type d -name "zstd" | grep -E "(lib|compression)/zstd" | head -1 || true)
          
          BACKUP_DIR="${GITHUB_WORKSPACE}/lz4_zstd_original_backup"
          mkdir -p "$BACKUP_DIR"
          
          echo "✅ 备份LZ4目录：$LZ4_DIR"
          mkdir -p "$BACKUP_DIR/lib"
          if [ ! -d "$LZ4_DIR" ]; then
            echo "::error ::备份失败，源LZ4目录不存在: $LZ4_DIR"
            exit 1
          fi
          cp -r "$LZ4_DIR" "$BACKUP_DIR/lib/lz4"
          if [ ! -d "$BACKUP_DIR/lib/lz4" ]; then
            echo "::error ::LZ4备份失败，目标目录未创建"
            exit 1
          fi
          echo "=== LZ4备份目录内容 ==="
          ls -la "$BACKUP_DIR/lib/lz4"
          
          if [ -n "$ZSTD_DIR" ] && [ -d "$ZSTD_DIR" ]; then
            ZSTD_REL_PATH="${ZSTD_DIR#$COMMON_DIR/}"
            echo "✅ 备份ZSTD目录：$ZSTD_DIR"
            mkdir -p "$BACKUP_DIR/$(dirname "$ZSTD_REL_PATH")"
            cp -r "$ZSTD_DIR" "$BACKUP_DIR/$ZSTD_REL_PATH"
            if [ -d "$BACKUP_DIR/$ZSTD_REL_PATH" ]; then
              echo "=== ZSTD备份目录内容 ==="
              ls -la "$BACKUP_DIR/$ZSTD_REL_PATH"
            else
              echo "⚠️ ZSTD备份失败"
            fi
          else
            echo "⚠️ 未找到ZSTD目录，跳过备份"
          fi

      # 11. 配置SUSFS & 执行main.bin修改LZ4
      - name: 🔧 Set up SUSFS & run main.bin
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
          git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git
          
          cd kernel_platform
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          
          cd ./common
          if [ "$DEVICES_NAME" != "oneplus_ace5_ultra" ] && [ "${REPO_MANIFEST}" != "realme_GT7" ]; then
            files=(
              "lib/lz4/lz4_compress.c"
              "lib/lz4/lz4_decompress.c"
              "lib/lz4/lz4defs.h"
              "lib/lz4/lz4hc_compress.c"
            )
            for file in "${files[@]}"; do
              if [ -e "$file" ]; then
                rm "$file"
                echo "已删除旧文件: $file"
              fi
            done
            if [ ! -f "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ]; then
              echo "::error ::main.bin不存在"
              exit 1
            fi
            cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ./
            chmod +x main.bin
            ./main.bin "setup_lz4"
            rm -rf ./main.bin
            echo "✅ main.bin执行完成，LZ4已修改"
            echo "=== 修改后LZ4目录内容 ==="
            ls -la "lib/lz4" || echo "修改后LZ4目录不存在"
            if [ ! -d "lib/lz4" ]; then
              echo "::error ::main.bin执行后LZ4目录丢失"
              exit 1
            fi
          fi

      # 12. 生成LZ4/ZSTD补丁（完整修复comm排序问题）
      - name: 🔨 Generate LZ4/ZSTD patches (final)
        run: |
          COMMON_DIR="kernel_workspace/kernel_platform/common"
          LZ4_DIR="$COMMON_DIR/lib/lz4"
          BACKUP_DIR="${GITHUB_WORKSPACE}/lz4_zstd_original_backup"
          PATCH_DIR="${GITHUB_WORKSPACE}/final_lz4_zstd_patches"
          mkdir -p "$PATCH_DIR"

          echo "=== 补丁生成环境信息 ==="
          echo "当前工作目录: $(pwd)"
          echo "COMMON_DIR: $COMMON_DIR"
          echo "LZ4_DIR: $LZ4_DIR"
          echo "BACKUP_DIR: $BACKUP_DIR"
          echo "BACKUP LZ4路径: $BACKUP_DIR/lib/lz4"
          echo "PATCH_DIR: $PATCH_DIR"

          # 1. 识别新增文件（核心修复：强制排序文件列表）
          echo -e "\n=== 识别新增文件 ==="
          # 生成并排序源文件列表
          find "$LZ4_DIR" -type f | sed "s|^$LZ4_DIR/||" | sort > "$PATCH_DIR/source_files.txt"
          # 生成并排序备份文件列表
          find "$BACKUP_DIR/lib/lz4" -type f | sed "s|^$BACKUP_DIR/lib/lz4/||" | sort > "$PATCH_DIR/backup_files.txt"
          
          # 验证排序结果
          echo "源文件列表前5行（已排序）:"
          head -n 5 "$PATCH_DIR/source_files.txt"
          echo "备份文件列表前5行（已排序）:"
          head -n 5 "$PATCH_DIR/backup_files.txt"
          
          # 使用排序后的文件执行comm命令
          NEW_FILES=$(comm -23 "$PATCH_DIR/source_files.txt" "$PATCH_DIR/backup_files.txt")
          
          if [ -n "$NEW_FILES" ]; then
            echo "检测到新增文件，共 $(echo "$NEW_FILES" | wc -l) 个:"
            echo "$NEW_FILES"
            for file in $NEW_FILES; do
              empty_file="$BACKUP_DIR/lib/lz4/$file"
              mkdir -p "$(dirname "$empty_file")"
              touch "$empty_file"
              echo "  已创建空备份文件: $empty_file"
            done
          else
            echo "未检测到新增文件"
          fi

          # 2. 处理符号链接
          echo -e "\n=== 处理符号链接 ==="
          for link in $(find "$LZ4_DIR" -type l); do
            echo "发现符号链接: $link，替换为实际文件"
            target=$(readlink "$link")
            rm "$link"
            cp "$target" "$link"
          done
          for link in $(find "$BACKUP_DIR/lib/lz4" -type l); do
            echo "发现备份符号链接: $link，替换为实际文件"
            target=$(readlink "$link")
            rm "$link"
            cp "$target" "$link"
          done

          # 3. 识别并排除二进制文件
          echo -e "\n=== 识别二进制文件 ==="
          BINARY_FILES=$(find "$LZ4_DIR" -type f ! -name "*.c" ! -name "*.h" ! -name "*.s" ! -name "Makefile" ! -name "Kconfig")
          if [ -n "$BINARY_FILES" ]; then
            echo "检测到非文本文件，将排除以下文件:"
            echo "$BINARY_FILES"
            EXCLUDE_PARAMS=$(echo "$BINARY_FILES" | xargs -n1 basename | sed 's/^/--exclude=/')
          else
            echo "未检测到非文本文件，无需排除"
            EXCLUDE_PARAMS=""
          fi

          # 4. 分文件对比检测
          echo -e "\n=== 分文件对比检测 ==="
          FAIL_FILES=""
          for file in $(find "$LZ4_DIR" -type f); do
            rel_path="${file#$LZ4_DIR/}"
            backup_file="$BACKUP_DIR/lib/lz4/$rel_path"
            if [ -f "$backup_file" ]; then
              echo "对比文件: $rel_path"
              if ! diff -u "$backup_file" "$file" > /dev/null 2>&1; then
                echo "  存在差异"
              fi
            else
              echo "  备份文件缺失: $rel_path"
              FAIL_FILES="$FAIL_FILES $rel_path"
            fi
          done
          if [ -n "$FAIL_FILES" ]; then
            echo "⚠️ 存在缺失的备份文件: $FAIL_FILES"
          fi

          # 5. 生成LZ4补丁
          echo -e "\n=== 生成LZ4补丁 ==="
          if diff -urN $EXCLUDE_PARAMS --binary "$BACKUP_DIR/lib/lz4" "$LZ4_DIR" > "$PATCH_DIR/lz4_patch_with_asm.patch"; then
            echo "✅ diff命令执行成功"
          else
            if [ $? -eq 1 ]; then
              echo "⚠️ diff返回1（存在差异，已生成补丁）"
            else
              echo "❌ diff命令失败（错误代码: $?）"
              exit 1
            fi
          fi

          # 6. 验证补丁内容
          if [ -s "$PATCH_DIR/lz4_patch_with_asm.patch" ]; then
            echo "✅ LZ4补丁生成成功，大小: $(du -sh "$PATCH_DIR/lz4_patch_with_asm.patch" | awk '{print $1}')"
            if [ -n "$NEW_FILES" ]; then
              echo "验证新增文件是否在补丁中:"
              for file in $NEW_FILES; do
                if grep -q "+++ $LZ4_DIR/$file" "$PATCH_DIR/lz4_patch_with_asm.patch"; then
                  echo "  ✅ 新增文件已包含: $file"
                else
                  echo "  ⚠️ 新增文件未包含: $file"
                fi
              done
            fi
            echo "补丁前10行预览:"
            head -n 10 "$PATCH_DIR/lz4_patch_with_asm.patch"
          else
            rm "$PATCH_DIR/lz4_patch_with_asm.patch"
            echo "⚠️ LZ4补丁为空（无改动）"
          fi

          # 7. 生成ZSTD补丁（同样修复排序问题）
          echo -e "\n=== 生成ZSTD补丁 ==="
          ZSTD_DIR=$(find "$COMMON_DIR" -type d -name "zstd" | grep -E "(lib|compression)/zstd" | head -1 || true)
          if [ -n "$ZSTD_DIR" ] && [ -d "$ZSTD_DIR" ] && [ -d "$BACKUP_DIR/$(basename "$ZSTD_DIR")" ]; then
            ZSTD_REL_PATH="${ZSTD_DIR#$COMMON_DIR/}"
            echo "ZSTD源目录: $ZSTD_DIR"
            echo "ZSTD备份目录: $BACKUP_DIR/$ZSTD_REL_PATH"
            
            # ZSTD新增文件检测（排序后对比）
            find "$ZSTD_DIR" -type f | sed "s|^$ZSTD_DIR/||" | sort > "$PATCH_DIR/zstd_source_files.txt"
            find "$BACKUP_DIR/$ZSTD_REL_PATH" -type f | sed "s|^$BACKUP_DIR/$ZSTD_REL_PATH/||" | sort > "$PATCH_DIR/zstd_backup_files.txt"
            ZSTD_NEW_FILES=$(comm -23 "$PATCH_DIR/zstd_source_files.txt" "$PATCH_DIR/zstd_backup_files.txt")
            
            if [ -n "$ZSTD_NEW_FILES" ]; then
              echo "ZSTD检测到新增文件: $(echo "$ZSTD_NEW_FILES" | wc -l) 个"
              for file in $ZSTD_NEW_FILES; do
                empty_file="$BACKUP_DIR/$ZSTD_REL_PATH/$file"
                mkdir -p "$(dirname "$empty_file")"
                touch "$empty_file"
              done
            fi
            
            # 生成ZSTD补丁
            diff -urN --binary "$BACKUP_DIR/$ZSTD_REL_PATH" "$ZSTD_DIR" > "$PATCH_DIR/zstd_patch_with_asm.patch"
            if [ -s "$PATCH_DIR/zstd_patch_with_asm.patch" ]; then
              echo "✅ ZSTD补丁生成成功"
            else
              rm "$PATCH_DIR/zstd_patch_with_asm.patch"
              echo "⚠️ ZSTD无实际改动，已删除空补丁"
            fi
          else
            echo "⚠️ ZSTD目录缺失或未改动，跳过补丁生成"
            echo "检测到的ZSTD_DIR: $ZSTD_DIR"
          fi

      # 13. 上传最终补丁产物
      - name: 📤 Upload LZ4/ZSTD patches
        uses: actions/upload-artifact@v4
        with:
          name: LZ4_ZSTD_Patches_${{ env.DEVICES_NAME }}
          path: |
            ./final_lz4_zstd_patches/*
            ./lz4_zstd_original_backup/*
          retention-days: 1
