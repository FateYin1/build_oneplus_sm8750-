name: LZ4_ZSTD_Patch_Generator
on:
  workflow_dispatch:
    inputs:
      REPO_MANIFEST:
        description: "选择机型"
        required: true
        type: choice
        options:
          - 'oneplus_13'
          - 'oneplus_ace5_pro'
          - 'oneplus_13t'
          - 'oneplus_pad_2_pro'
          - 'oneplus_ace5_ultra'
          - 'realme_GT7'
          - 'realme_GT7pro'
          - 'realme_GT7pro_Speed'
        default: 'oneplus_13'


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置机型环境变量
        run: |
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            oneplus_ace5_pro)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_ace5_pro_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_ace5_pro" >> $GITHUB_ENV
              ;;
            *)
              echo "REPO_MANIFEST=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              echo "DEVICES_NAME=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              ;;
          esac

      - name: 安装依赖（含监控工具）
        run: |
          sudo apt update -y
          sudo apt install -y git ccache inotify-tools strace coreutils python3 python3-pip
          # 卸载系统旧版repo（避免冲突）
          sudo apt remove -y repo || true

      - name: 安装最新版Repo工具（修复警告）
        run: |
          # 创建用户级二进制目录（确保可写）
          mkdir -p ~/bin
          echo 'export PATH="$HOME/bin:$PATH"' >> ~/.bashrc
          source ~/.bashrc
          
          # 下载最新版repo launcher（来自官方源）
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/bin/repo
          chmod a+x ~/bin/repo
          
          # 修复Python语法警告（替换utcnow()为 timezone-aware 写法）
          sed -i 's/import datetime/import datetime\nfrom datetime import UTC/' ~/bin/repo
          sed -i 's/datetime.datetime.utcnow()/datetime.datetime.now(UTC)/g' ~/bin/repo
          
          # 验证安装
          echo "使用的repo路径：$(which repo)"
          echo "repo版本：$(repo --version | head -n1)"

      - name: 同步内核源码
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          # 使用新版repo初始化，消除警告
          repo init -u https://github.com/showdo/kernel_manifest.git -b refs/heads/oneplus/sm8750 -m ${REPO_MANIFEST}.xml --depth=1
          # 同步源码，增加--no-clone-bundle提升兼容性
          repo sync -c -j$(nproc) --no-tags --no-clone-bundle

      - name: 核心步骤：监控并生成LZ4/ZSTD补丁（含汇编文件）
        run: |
          # 定义关键路径
          COMMON_DIR="kernel_workspace/kernel_platform/common"
          LZ4_DIR="$COMMON_DIR/lib/lz4"       # LZ4核心目录
          ZSTD_DIR="$COMMON_DIR/lib/zstd"     # ZSTD核心目录
          BACKUP_DIR="${GITHUB_WORKSPACE}/lz4_zstd_backup"  # 原始文件备份
          PATCH_DIR="${GITHUB_WORKSPACE}/lz4_zstd_patches"  # 最终补丁输出
          MONITOR_LOG="${GITHUB_WORKSPACE}/monitor_logs"     # 监控日志
          mkdir -p "$BACKUP_DIR" "$PATCH_DIR" "$MONITOR_LOG"

          # -------------------------- 1. 备份原始文件（含汇编文件） --------------------------
          echo "📋 备份LZ4/ZSTD原始文件（含.s汇编文件）"
          
          # 备份LZ4相关文件（明确包含.s汇编文件）
          for file in $(find "$LZ4_DIR" -type f \( -name "*.c" -o -name "*.h" -o -name "*.s" -o -name "Makefile" -o -name "*.mk" \)); do
            rel_path="${file#$COMMON_DIR/}"  # 相对路径（如lib/lz4/lz4_asm.s）
            mkdir -p "$BACKUP_DIR/$(dirname "$rel_path")"
            cp "$file" "$BACKUP_DIR/$rel_path"
            echo "✅ 备份LZ4文件：$rel_path"
          done
          
          # 备份ZSTD相关文件（明确包含.s汇编文件）
          for file in $(find "$ZSTD_DIR" -type f \( -name "*.c" -o -name "*.h" -o -name "*.s" -o -name "Makefile" -o -name "*.mk" \)); do
            rel_path="${file#$COMMON_DIR/}"
            mkdir -p "$BACKUP_DIR/$(dirname "$rel_path")"
            cp "$file" "$BACKUP_DIR/$rel_path"
            echo "✅ 备份ZSTD文件：$rel_path"
          done

          # -------------------------- 2. 启动多维度监控（聚焦LZ4/ZSTD） --------------------------
          echo "🔍 启动监控（仅跟踪LZ4/ZSTD目录）"
          
          # 2.1 inotify实时监控（仅监控LZ4和ZSTD目录）
          INOTIFY_LOG="$MONITOR_LOG/inotify.log"
          inotifywait -m -r \
            --timefmt "%Y-%m-%d %H:%M:%S" \
            --format "%T %e %w%f" \
            -e create -e delete -e modify -e move \
            "$LZ4_DIR" "$ZSTD_DIR" > "$INOTIFY_LOG" 2>&1 &
          INOTIFY_PID=$!
          
          # 2.2 记录git初始状态（用于后续diff）
          cd "$COMMON_DIR"
          git add -A
          git commit -m "Initial state before main.bin" || true
          INIT_COMMIT=$(git rev-parse HEAD)

          # -------------------------- 3. 执行main.bin（触发修改） --------------------------
          echo "🔧 执行main.bin（仅关注LZ4/ZSTD修改）"
          cd "$COMMON_DIR"
          
          # 清理原有文件（模拟原工作流）
          rm -f lib/lz4/lz4_compress.c lib/lz4/lz4_decompress.c lib/lz4/lz4defs.h lib/lz4/lz4hc_compress.c
          
          # 执行加密脚本（假设main.bin在当前目录）
          cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ./
          chmod +x main.bin
          
          # 用strace监控系统调用（仅记录LZ4/ZSTD相关文件操作）
          STRACE_LOG="$MONITOR_LOG/strace.log"
          strace -f -e trace=file -o "$STRACE_LOG" ./main.bin "setup_lz4"
          
          # 停止inotify监控
          kill $INOTIFY_PID
          rm -f main.bin

          # -------------------------- 4. 分析监控结果（提取LZ4/ZSTD改动） --------------------------
          echo "📊 分析监控结果，提取LZ4/ZSTD改动"
          
          # 4.1 从git diff提取LZ4/ZSTD改动
          git diff $INIT_COMMIT --name-only | grep -E "^lib/lz4/|^lib/zstd/" > "$MONITOR_LOG/git_changed.txt"
          
          # 4.2 从inotify提取LZ4/ZSTD改动
          grep -E "$LZ4_DIR|$ZSTD_DIR" "$INOTIFY_LOG" | awk '{print $3}' | sed "s|$COMMON_DIR/||" >> "$MONITOR_LOG/inotify_changed.txt"
          
          # 4.3 从strace提取LZ4/ZSTD改动
          grep -E "$LZ4_DIR|$ZSTD_DIR" "$STRACE_LOG" | awk -F'"' '{print $2}' | sed "s|$COMMON_DIR/||" >> "$MONITOR_LOG/strace_changed.txt"
          
          # 4.4 整合所有改动文件（去重）
          cat "$MONITOR_LOG/git_changed.txt" "$MONITOR_LOG/inotify_changed.txt" "$MONITOR_LOG/strace_changed.txt" \
            | sort | uniq | grep -E "^lib/lz4/|^lib/zstd/" > "$MONITOR_LOG/all_changed.txt"
          
          echo "=== 检测到的LZ4/ZSTD改动文件 ==="
          cat "$MONITOR_LOG/all_changed.txt"

          # -------------------------- 5. 生成纯净的LZ4/ZSTD补丁（含汇编文件） --------------------------
          echo "🔨 生成LZ4/ZSTD补丁（含.s汇编文件）"
          
          while read -r file; do
            # 处理修改的文件（生成diff补丁）
            if [ -f "$BACKUP_DIR/$file" ] && [ -f "$COMMON_DIR/$file" ]; then
              # 生成补丁（忽略空白差异）
              diff -u -w "$BACKUP_DIR/$file" "$COMMON_DIR/$file" > "$PATCH_DIR/$(echo "$file" | tr '/' '_').patch"
              if [ -s "$PATCH_DIR/$(echo "$file" | tr '/' '_').patch" ]; then
                echo "✅ 生成补丁：$file"
              else
                rm "$PATCH_DIR/$(echo "$file" | tr '/' '_').patch"  # 空补丁删除
              fi
              
            # 处理新增的文件（直接保存）
            elif [ ! -f "$BACKUP_DIR/$file" ] && [ -f "$COMMON_DIR/$file" ]; then
              mkdir -p "$PATCH_DIR/$(dirname "$file")"
              cp "$COMMON_DIR/$file" "$PATCH_DIR/$file"
              echo "✅ 保存新增文件：$file"
            fi
          done < "$MONITOR_LOG/all_changed.txt"

          # 验证补丁生成结果
          if [ -n "$(ls -A "$PATCH_DIR" 2>/dev/null)" ]; then
            echo "✅ LZ4/ZSTD补丁生成完成，路径：$PATCH_DIR"
          else
            echo "⚠️ 未检测到LZ4/ZSTD改动，未生成补丁"
          fi

      - name: 上传LZ4/ZSTD补丁（含汇编文件）
        uses: actions/upload-artifact@v4
        with:
          name: lz4_zstd_patches_with_asm_${{ env.DEVICES_NAME }}
          path: |
            ./lz4_zstd_patches/  # 最终补丁（含.s汇编文件）
            ./monitor_logs/      # 监控日志（用于排查）
          retention-days: 365
