name: LZ4_ZSTD_Patch_Generator
on:
  workflow_dispatch:
    inputs:
      REPO_MANIFEST:
        description: "选择机型"
        required: true
        type: choice
        options:
          - 'oneplus_13'
          - 'oneplus_ace5_pro'
          - 'oneplus_13t'
          - 'oneplus_pad_2_pro'
          - 'oneplus_ace5_ultra'
          - 'realme_GT7'
          - 'realme_GT7pro'
          - 'realme_GT7pro_Speed'
        default: 'oneplus_13'


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: ⚙️ 设置机型环境变量
        run: |
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            oneplus_ace5_pro)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_ace5_pro_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_ace5_pro" >> $GITHUB_ENV
              ;;
            oneplus_13)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_13_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_13" >> $GITHUB_ENV
              ;;
            *)
              echo "REPO_MANIFEST=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              echo "DEVICES_NAME=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              ;;
          esac

      - name: 📦 安装依赖
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          sudo apt update -y
          sudo apt install -y \
            git ccache inotify-tools strace coreutils python3 python3-pip \
            build-essential libelf-dev flex bison libssl-dev
          sudo apt remove -y repo || true

      - name: 📥 安装最新版Repo工具
        run: |
          REPO_BIN_DIR="/home/runner/bin"
          mkdir -p "$REPO_BIN_DIR"
          export PATH="$REPO_BIN_DIR:$PATH"
          
          curl -fL https://storage.googleapis.com/git-repo-downloads/repo > "$REPO_BIN_DIR/repo"
          chmod a+x "$REPO_BIN_DIR/repo"
          sed -i 's/import datetime/import datetime\nfrom datetime import UTC/' "$REPO_BIN_DIR/repo"
          sed -i 's/datetime.datetime.utcnow()/datetime.datetime.now(UTC)/g' "$REPO_BIN_DIR/repo"
          
          hash -r
          if command -v repo &> /dev/null; then
            echo "✅ repo安装成功：$(which repo)"
          else
            echo "❌ repo安装失败"
            exit 1
          fi

      - name: 📥 同步内核源码（强化验证）
        run: |
          export PATH="/home/runner/bin:$PATH"
          mkdir -p kernel_workspace && cd kernel_workspace
          
          repo init -u https://github.com/showdo/kernel_manifest.git \
            -b refs/heads/oneplus/sm8750 \
            -m ${REPO_MANIFEST}.xml \
            --depth=1 || { echo "❌ repo init失败"; exit 1; }
          
          # 同步重试机制
          for i in {1..3}; do
            repo sync -c -j$(nproc) --no-tags --no-clone-bundle && break
            if [ $i -eq 3 ]; then
              echo "❌ repo sync重试3次失败"
              exit 1
            fi
            echo "⚠️ repo sync失败，重试第$i次"
            sleep 5
          done
          
          # 打印源码根目录结构（关键调试信息）
          echo "=== 源码根目录结构（kernel_workspace） ==="
          ls -la
          
          # 自动探测common目录（适配可能的结构差异）
          COMMON_CANDIDATES=(
            "kernel_platform/common"
            "kernel/common"  # 备选路径1
            "common"         # 备选路径2
            "platform/common" # 备选路径3
          )
          FOUND_COMMON=""
          for candidate in "${COMMON_CANDIDATES[@]}"; do
            if [ -d "$candidate" ]; then
              FOUND_COMMON="$candidate"
              break
            fi
          done
          
          if [ -z "$FOUND_COMMON" ]; then
            echo "❌ 未找到common目录，候选路径："
            printf "%s\n" "${COMMON_CANDIDATES[@]}"
            exit 1
          else
            echo "✅ 找到common目录：$FOUND_COMMON"
            echo "COMMON_DIR=$FOUND_COMMON" >> $GITHUB_ENV  # 存入环境变量
          fi

      - name: 🔍 监控并生成LZ4/ZSTD补丁（含汇编文件）
        run: |
          # 从环境变量获取实际common目录（关键修复）
          COMMON_DIR="${{ env.COMMON_DIR }}"
          echo "使用的common目录：$COMMON_DIR"
          
          # 定义LZ4/ZSTD目录（增加备选路径）
          LZ4_CANDIDATES=(
            "$COMMON_DIR/lib/lz4"
            "$COMMON_DIR/lz4"  # 备选路径
            "$COMMON_DIR/compression/lz4"  # 备选路径
          )
          ZSTD_CANDIDATES=(
            "$COMMON_DIR/lib/zstd"
            "$COMMON_DIR/zstd"  # 备选路径
            "$COMMON_DIR/compression/zstd"  # 备选路径
          )
          
          # 自动探测LZ4目录
          FOUND_LZ4=""
          for candidate in "${LZ4_CANDIDATES[@]}"; do
            if [ -d "$candidate" ]; then
              FOUND_LZ4="$candidate"
              break
            fi
          done
          if [ -z "$FOUND_LZ4" ]; then
            echo "❌ 未找到LZ4目录，候选路径："
            printf "%s\n" "${LZ4_CANDIDATES[@]}"
            exit 1
          else
            echo "✅ 找到LZ4目录：$FOUND_LZ4"
            LZ4_DIR="$FOUND_LZ4"
          fi
          
          # 自动探测ZSTD目录
          FOUND_ZSTD=""
          for candidate in "${ZSTD_CANDIDATES[@]}"; do
            if [ -d "$candidate" ]; then
              FOUND_ZSTD="$candidate"
              break
            fi
          done
          if [ -z "$FOUND_ZSTD" ]; then
            echo "❌ 未找到ZSTD目录，候选路径："
            printf "%s\n" "${ZSTD_CANDIDATES[@]}"
            exit 1
          else
            echo "✅ 找到ZSTD目录：$FOUND_ZSTD"
            ZSTD_DIR="$FOUND_ZSTD"
          fi
          
          # 定义其他路径
          BACKUP_DIR="${GITHUB_WORKSPACE}/lz4_zstd_backup"
          PATCH_DIR="${GITHUB_WORKSPACE}/lz4_zstd_patches"
          MONITOR_LOG="${GITHUB_WORKSPACE}/monitor_logs"
          mkdir -p "$BACKUP_DIR" "$PATCH_DIR" "$MONITOR_LOG"

          # 配置Git用户身份
          echo "📋 配置Git用户身份"
          cd "$COMMON_DIR"
          git config user.email "action@github.com"
          git config user.name "GitHub Action"

          # 备份原始文件（仅备份存在的目录）
          echo "📋 备份LZ4原始文件"
          find "$LZ4_DIR" -type f \( -name "*.c" -o -name "*.h" -o -name "*.s" -o -name "Makefile" -o -name "*.mk" \) | while read -r file; do
            rel_path="${file#$COMMON_DIR/}"
            mkdir -p "$BACKUP_DIR/$(dirname "$rel_path")"
            cp "$file" "$BACKUP_DIR/$rel_path"
            echo "✅ 备份LZ4文件：$rel_path"
          done
          
          echo "📋 备份ZSTD原始文件"
          find "$ZSTD_DIR" -type f \( -name "*.c" -o -name "*.h" -o -name "*.s" -o -name "Makefile" -o -name "*.mk" \) | while read -r file; do
            rel_path="${file#$COMMON_DIR/}"
            mkdir -p "$BACKUP_DIR/$(dirname "$rel_path")"
            cp "$file" "$BACKUP_DIR/$rel_path"
            echo "✅ 备份ZSTD文件：$rel_path"
          done

          # 启动监控
          echo "🔍 启动监控"
          INOTIFY_LOG="$MONITOR_LOG/inotify.log"
          inotifywait -m -r \
            --timefmt "%Y-%m-%d %H:%M:%S" \
            --format "%T %e %w%f" \
            -e create -e delete -e modify -e move \
            "$LZ4_DIR" "$ZSTD_DIR" > "$INOTIFY_LOG" 2>&1 &
          INOTIFY_PID=$!
          echo "inotify监控PID：$INOTIFY_PID"
          
          # 记录Git基准状态
          cd "$COMMON_DIR"
          git add -A
          git commit -m "Initial state before main.bin" || true
          INIT_COMMIT=$(git rev-parse HEAD)
          echo "git基准提交：$INIT_COMMIT"

          # 执行main.bin
          echo "🔧 执行main.bin"
          if [ ! -d "$COMMON_DIR" ]; then
            echo "❌ 目录不存在：$COMMON_DIR"
            exit 1
          fi
          cd "$COMMON_DIR"
          
          MAIN_BIN_PATH="${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin"
          if [ ! -f "$MAIN_BIN_PATH" ]; then
            echo "❌ 未找到main.bin：$MAIN_BIN_PATH"
            exit 1
          fi
          cp "$MAIN_BIN_PATH" ./
          chmod +x main.bin
          
          STRACE_LOG="$MONITOR_LOG/strace.log"
          strace -f -e trace=file -o "$STRACE_LOG" ./main.bin "setup_lz4"
          
          kill $INOTIFY_PID
          rm -f main.bin

          # 分析结果
          echo "📊 分析改动文件"
          git diff "$INIT_COMMIT" --name-only | grep -E "$(echo "$LZ4_DIR|$ZSTD_DIR" | sed "s|$COMMON_DIR/||g")" > "$MONITOR_LOG/git_changed.txt"
          grep -E "$LZ4_DIR|$ZSTD_DIR" "$INOTIFY_LOG" | awk '{print $3}' | sed "s|$COMMON_DIR/||" >> "$MONITOR_LOG/inotify_changed.txt"
          grep -E "$LZ4_DIR|$ZSTD_DIR" "$STRACE_LOG" | awk -F'"' '{print $2}' | sed "s|$COMMON_DIR/||" >> "$MONITOR_LOG/strace_changed.txt"
          
          cat "$MONITOR_LOG/git_changed.txt" "$MONITOR_LOG/inotify_changed.txt" "$MONITOR_LOG/strace_changed.txt" \
            | sort | uniq > "$MONITOR_LOG/all_changed.txt"
          
          echo "=== 检测到的改动文件 ==="
          cat "$MONITOR_LOG/all_changed.txt"

          # 生成补丁
          echo "🔨 生成补丁"
          while read -r file; do
            if [ -f "$BACKUP_DIR/$file" ] && [ -f "$COMMON_DIR/$file" ]; then
              patch_filename="$(echo "$file" | tr '/' '_').patch"
              diff -u -w "$BACKUP_DIR/$file" "$COMMON_DIR/$file" > "$PATCH_DIR/$patch_filename"
              if [ -s "$PATCH_DIR/$patch_filename" ]; then
                echo "✅ 生成补丁：$patch_filename"
              else
                rm "$PATCH_DIR/$patch_filename"
              fi
            elif [ ! -f "$BACKUP_DIR/$file" ] && [ -f "$COMMON_DIR/$file" ]; then
              new_file_path="$PATCH_DIR/$file"
              mkdir -p "$(dirname "$new_file_path")"
              cp "$COMMON_DIR/$file" "$new_file_path"
              echo "✅ 保存新增文件：$file"
            fi
          done < "$MONITOR_LOG/all_changed.txt"

      - name: 📤 上传产物
        uses: actions/upload-artifact@v4
        with:
          name: lz4_zstd_patches_with_asm_${{ env.DEVICES_NAME }}
          path: |
            ./lz4_zstd_patches/
            ./monitor_logs/
          retention-days: 365
