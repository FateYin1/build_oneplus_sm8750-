name: LZ4_ZSTD_Patch_Capture_Only
on:
  workflow_dispatch:
    inputs:
      REPO_MANIFEST:
        description: "📝选择机型"
        required: true
        type: choice
        options:
          - 'oneplus_13'
          - 'oneplus_ace5_pro'
          - 'oneplus_13t'
          - 'oneplus_pad_2_pro'
          - 'oneplus_ace5_ultra'
          - 'realme_GT7'
          - 'realme_GT7pro'
          - 'realme_GT7pro_Speed'
        default: 'oneplus_13'


jobs:
  capture_patch:
    name: Capture_LZ4_ZSTD_Patch_${{ github.event.inputs.REPO_MANIFEST }}
    runs-on: ubuntu-latest
    steps:
      # 1. 检出仓库代码
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. 检查磁盘空间
      - name: 📊 Check disk space
        run: |
          echo "构建前磁盘空间："
          df -h

      # 3. 设置机型环境变量
      - name: ⚙️ Set REPO_MANIFEST & DEVICES_NAME
        run: |
          case "${{ github.event.inputs.REPO_MANIFEST }}" in
            oneplus_ace5_pro)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_ace5_pro_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_ace5_pro" >> $GITHUB_ENV
              ;;
            oneplus_13)
              echo "REPO_MANIFEST=JiuGeFaCai_oneplus_13_v" >> $GITHUB_ENV
              echo "DEVICES_NAME=oneplus_13" >> $GITHUB_ENV
              ;;
            *)
              echo "REPO_MANIFEST=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              echo "DEVICES_NAME=${{ github.event.inputs.REPO_MANIFEST }}" >> $GITHUB_ENV
              ;;
          esac
          # 设置默认编译时间
          echo 'KERNEL_TIME=Mon May 12 09:09:59 UTC 2025' >> $GITHUB_ENV

      # 4. 配置Git账户
      - name: 📦 Configure Git
        run: |
          git config --global user.name "FateYin1"
          git config --global user.email "1244243922@qq.com"

      # 5. 配置APT缓存并安装依赖
      - name: 🛠 Configure APT & Install dependencies
        run: |
          # 配置APT缓存
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

          # 安装依赖
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          sudo apt -o Dir::Cache="$APT_CACHE_DIR" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$APT_CACHE_DIR" install -yq --no-install-recommends \
            python3 git curl libelf-dev \
            build-essential flex bison libssl-dev \
            liblz4-tool zlib1g-dev rsync unzip coreutils

      # 6. 安装并修复repo工具
      - name: 📥 Install & Fix repo tool
        run: |
          sudo apt remove -y repo || true
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo
          # 修复Python语法警告
          sudo sed -i 's/import datetime/import datetime\nfrom datetime import UTC/' /usr/local/bin/repo
          sudo sed -i 's/datetime.datetime.utcnow()/datetime.datetime.now(UTC)/g' /usr/local/bin/repo

      # 7. 同步内核源码
      - name: 📥 Sync kernel source
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/showdo/kernel_manifest.git -b refs/heads/oneplus/sm8750 -m ${REPO_MANIFEST}.xml --depth=1
          repo --trace sync -c -j$(nproc --all) --no-tags
          # 清理冗余文件
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
          # 验证LZ4目录存在
          if [ ! -d "kernel_platform/common/lib/lz4" ]; then
            echo "::error ::LZ4核心目录不存在: kernel_platform/common/lib/lz4"
            exit 1
          fi
          # 打印LZ4原始目录内容
          echo "=== 同步后原始LZ4目录内容 ==="
          ls -la "kernel_platform/common/lib/lz4"

      # 8. 配置SuKiSU Ultra
      - name: ⚙️ Set SuKiSU Ultra
        run: |
          mkdir -p kernel_workspace/kernel_platform
          cd kernel_workspace/kernel_platform
          
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/setup.sh" -o setup.sh && bash setup.sh susfs-main
          cd KernelSU
          KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          
          cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/setup.bin" ./
          chmod +x setup.bin
          if [ ! -f "kernel/Makefile" ]; then
            echo "::error ::kernel/Makefile不存在"
            exit 1
          fi
          ./setup.bin

      # 9. 替换SuKiSU版本标识
      - name: 🛠 Replace SuKiSU version tag
        run: |
          cd kernel_workspace/kernel_platform
          TARGET_FILES=$(grep -rl "TG@qdykernel" . || true)
          if [ -n "$TARGET_FILES" ]; then
            sed -i 's/TG@qdykernel/酷安Fate007/g' $TARGET_FILES
            echo "✅ 版本标识替换完成"
          else
            echo "⚠️ 未找到目标标识文件"
          fi

      # 10. 备份LZ4/ZSTD原始文件（含修复）
      - name: 📋 Backup original LZ4/ZSTD files (fixed)
        run: |
          COMMON_DIR="kernel_workspace/kernel_platform/common"
          LZ4_DIR="$COMMON_DIR/lib/lz4"
          ZSTD_DIR=$(find "$COMMON_DIR" -type d -name "zstd" | grep -E "(lib|compression)/zstd" | head -1 || true)
          
          BACKUP_DIR="${GITHUB_WORKSPACE}/lz4_zstd_original_backup"
          mkdir -p "$BACKUP_DIR"  # 创建备份根目录
          
          # 修复：提前创建LZ4目标路径的所有父目录
          echo "✅ 备份LZ4目录：$LZ4_DIR"
          mkdir -p "$BACKUP_DIR/lib"  # 关键修复：确保lib目录存在
          # 复制前先检查源目录是否存在
          if [ ! -d "$LZ4_DIR" ]; then
            echo "::error ::备份失败，源LZ4目录不存在: $LZ4_DIR"
            exit 1
          fi
          cp -r "$LZ4_DIR" "$BACKUP_DIR/lib/lz4"  # 现在可以正常复制
          # 验证备份结果
          if [ ! -d "$BACKUP_DIR/lib/lz4" ]; then
            echo "::error ::LZ4备份失败，目标目录未创建: $BACKUP_DIR/lib/lz4"
            exit 1
          fi
          echo "=== LZ4备份目录内容 ==="
          ls -la "$BACKUP_DIR/lib/lz4"
          
          # 备份ZSTD（若存在）
          if [ -n "$ZSTD_DIR" ] && [ -d "$ZSTD_DIR" ]; then
            ZSTD_REL_PATH="${ZSTD_DIR#$COMMON_DIR/}"
            echo "✅ 备份ZSTD目录：$ZSTD_DIR"
            mkdir -p "$BACKUP_DIR/$(dirname "$ZSTD_REL_PATH")"  # 确保父目录存在
            cp -r "$ZSTD_DIR" "$BACKUP_DIR/$ZSTD_REL_PATH"
            # 验证ZSTD备份
            if [ -d "$BACKUP_DIR/$ZSTD_REL_PATH" ]; then
              echo "=== ZSTD备份目录内容 ==="
              ls -la "$BACKUP_DIR/$ZSTD_REL_PATH"
            else
              echo "⚠️ ZSTD备份失败，目标目录未创建"
            fi
          else
            echo "⚠️ 未找到ZSTD目录，跳过备份"
          fi

      # 11. 配置SUSFS & 执行main.bin修改LZ4
      - name: 🔧 Set up SUSFS & run main.bin
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
          git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git
          
          cd kernel_platform
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./common/include/linux
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./common/lib
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./common/crypto
          cp -r ../SukiSU_patch/other/zram/lz4k_oplus ./common/lib/
          
          cd ./common
          if [ "$DEVICES_NAME" != "oneplus_ace5_ultra" ] && [ "${REPO_MANIFEST}" != "realme_GT7" ]; then
            files=(
              "lib/lz4/lz4_compress.c"
              "lib/lz4/lz4_decompress.c"
              "lib/lz4/lz4defs.h"
              "lib/lz4/lz4hc_compress.c"
            )
            for file in "${files[@]}"; do
              if [ -e "$file" ]; then
                rm "$file"
                echo "已删除旧文件: $file"
              fi
            done
            # 检查main.bin是否存在
            if [ ! -f "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ]; then
              echo "::error ::main.bin不存在，请检查路径"
              exit 1
            fi
            cp "${GITHUB_WORKSPACE}/.github/workflows/Bin/main.bin" ./
            chmod +x main.bin
            ./main.bin "setup_lz4"
            rm -rf ./main.bin
            echo "✅ main.bin执行完成，LZ4已修改"
            # 打印修改后的LZ4目录内容
            echo "=== 修改后LZ4目录内容 ==="
            ls -la "lib/lz4" || echo "修改后LZ4目录不存在"
            # 再次确认目录存在性
            if [ ! -d "lib/lz4" ]; then
              echo "::error ::main.bin执行后LZ4目录丢失"
              exit 1
            fi
          fi

      # 12. 生成LZ4/ZSTD补丁（添加完整调试和容错）
      - name: 🔨 Generate LZ4/ZSTD patches (with full debug)
        run: |
          # 定义核心路径
          COMMON_DIR="kernel_workspace/kernel_platform/common"
          LZ4_DIR="$COMMON_DIR/lib/lz4"
          BACKUP_DIR="${GITHUB_WORKSPACE}/lz4_zstd_original_backup"
          PATCH_DIR="${GITHUB_WORKSPACE}/final_lz4_zstd_patches"
          mkdir -p "$PATCH_DIR"

          # 详细路径调试
          echo "=== 补丁生成环境信息 ==="
          echo "当前工作目录: $(pwd)"
          echo "COMMON_DIR: $COMMON_DIR"
          echo "LZ4_DIR: $LZ4_DIR"
          echo "BACKUP_DIR: $BACKUP_DIR"
          echo "BACKUP LZ4路径: $BACKUP_DIR/lib/lz4"
          echo "PATCH_DIR: $PATCH_DIR"

          # 目录存在性检查
          echo -e "\n=== 关键目录存在性验证 ==="
          if [ ! -d "$LZ4_DIR" ]; then
            echo "::error ::错误1: 修改后的LZ4目录不存在 - $LZ4_DIR"
            exit 1
          else
            echo "✅ 验证通过: 修改后的LZ4目录存在"
          fi

          if [ ! -d "$BACKUP_DIR/lib/lz4" ]; then
            echo "::error ::错误2: 备份的LZ4目录不存在 - $BACKUP_DIR/lib/lz4"
            exit 1
          else
            echo "✅ 验证通过: 备份的LZ4目录存在"
          fi

          # 显示目录内容对比
          echo -e "\n=== 目录内容对比 ==="
          echo "修改后的LZ4文件列表:"
          ls -la "$LZ4_DIR"
          echo -e "\n备份的LZ4文件列表:"
          ls -la "$BACKUP_DIR/lib/lz4"

          # 生成LZ4补丁（带错误捕获）
          echo -e "\n=== 开始生成LZ4补丁 ==="
          # 使用diff命令并捕获错误
          if diff -urN "$BACKUP_DIR/lib/lz4" "$LZ4_DIR" > "$PATCH_DIR/lz4_patch_with_asm.patch"; then
            echo "✅ diff命令执行成功"
            # 检查补丁是否为空
            if [ -s "$PATCH_DIR/lz4_patch_with_asm.patch" ]; then
              echo "✅ LZ4补丁生成成功（非空文件）"
              echo "补丁大小: $(du -sh "$PATCH_DIR/lz4_patch_with_asm.patch" | awk '{print $1}')"
              echo "补丁前10行预览:"
              head -n 10 "$PATCH_DIR/lz4_patch_with_asm.patch"
            else
              rm "$PATCH_DIR/lz4_patch_with_asm.patch"
              echo "⚠️ 生成的LZ4补丁为空，已删除（可能无实际改动）"
            fi
          else
            echo "❌ diff命令执行失败，错误代码: $?"
            # 检查是否生成了部分补丁文件
            if [ -f "$PATCH_DIR/lz4_patch_with_asm.patch" ]; then
              echo "错误时生成的补丁内容:"
              cat "$PATCH_DIR/lz4_patch_with_asm.patch"
            else
              echo "未生成任何补丁文件"
            fi
            # 尝试使用--ignore-all-space参数重试（处理空格导致的差异）
            echo "尝试忽略空格差异重新生成补丁..."
            if diff -urN -w "$BACKUP_DIR/lib/lz4" "$LZ4_DIR" > "$PATCH_DIR/lz4_patch_with_asm_ignore_space.patch"; then
              echo "✅ 忽略空格后补丁生成成功"
              echo "忽略空格的补丁大小: $(du -sh "$PATCH_DIR/lz4_patch_with_asm_ignore_space.patch" | awk '{print $1}')"
            else
              echo "❌ 忽略空格后仍生成失败"
              exit 1
            fi
          fi

          # 生成ZSTD补丁
          echo -e "\n=== 开始生成ZSTD补丁 ==="
          ZSTD_DIR=$(find "$COMMON_DIR" -type d -name "zstd" | grep -E "(lib|compression)/zstd" | head -1 || true)
          if [ -n "$ZSTD_DIR" ] && [ -d "$ZSTD_DIR" ] && [ -d "$BACKUP_DIR/$(basename "$ZSTD_DIR")" ]; then
            ZSTD_REL_PATH="${ZSTD_DIR#$COMMON_DIR/}"
            echo "ZSTD源目录: $ZSTD_DIR"
            echo "ZSTD备份目录: $BACKUP_DIR/$ZSTD_REL_PATH"
            
            diff -urN "$BACKUP_DIR/$ZSTD_REL_PATH" "$ZSTD_DIR" > "$PATCH_DIR/zstd_patch_with_asm.patch"
            if [ -s "$PATCH_DIR/zstd_patch_with_asm.patch" ]; then
              echo "✅ ZSTD补丁生成成功"
            else
              rm "$PATCH_DIR/zstd_patch_with_asm.patch"
              echo "⚠️ ZSTD无实际改动，已删除空补丁"
            fi
          else
            echo "⚠️ ZSTD目录缺失或未改动，跳过补丁生成"
            echo "检测到的ZSTD_DIR: $ZSTD_DIR"
          fi

      # 13. 上传最终补丁产物
      - name: 📤 Upload LZ4/ZSTD patches
        uses: actions/upload-artifact@v4
        with:
          name: LZ4_ZSTD_Patches_${{ env.DEVICES_NAME }}
          path: |
            ./final_lz4_zstd_patches/*
            ./lz4_zstd_original_backup/*
          retention-days: 365
